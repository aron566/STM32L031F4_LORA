
LORA_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002028  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080020e8  080020e8  000120e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800213c  0800213c  0001213c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002144  08002144  00012144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002148  08002148  00012148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000008  20000000  0800214c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000e40  20000008  08002154  00020008  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000e48  08002154  00020e48  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f0e4  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b17  00000000  00000000  0002f114  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000066e8  00000000  00000000  00031c2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b40  00000000  00000000  00038318  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000de8  00000000  00000000  00038e58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000061a5  00000000  00000000  00039c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f10  00000000  00000000  0003fde5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00043cf5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001ef0  00000000  00000000  00043d74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080020d0 	.word	0x080020d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	080020d0 	.word	0x080020d0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	1c08      	adds	r0, r1, #0
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	b083      	sub	sp, #12
 8000284:	000d      	movs	r5, r1
 8000286:	4692      	mov	sl, r2
 8000288:	4699      	mov	r9, r3
 800028a:	428b      	cmp	r3, r1
 800028c:	d82f      	bhi.n	80002ee <__udivmoddi4+0x7a>
 800028e:	d02c      	beq.n	80002ea <__udivmoddi4+0x76>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ae 	bl	80003f4 <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8a9 	bl	80003f4 <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	469b      	mov	fp, r3
 80002aa:	d500      	bpl.n	80002ae <__udivmoddi4+0x3a>
 80002ac:	e074      	b.n	8000398 <__udivmoddi4+0x124>
 80002ae:	4653      	mov	r3, sl
 80002b0:	465a      	mov	r2, fp
 80002b2:	4093      	lsls	r3, r2
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4642      	mov	r2, r8
 80002ba:	4093      	lsls	r3, r2
 80002bc:	001e      	movs	r6, r3
 80002be:	42af      	cmp	r7, r5
 80002c0:	d829      	bhi.n	8000316 <__udivmoddi4+0xa2>
 80002c2:	d026      	beq.n	8000312 <__udivmoddi4+0x9e>
 80002c4:	465b      	mov	r3, fp
 80002c6:	1ba4      	subs	r4, r4, r6
 80002c8:	41bd      	sbcs	r5, r7
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	da00      	bge.n	80002d0 <__udivmoddi4+0x5c>
 80002ce:	e079      	b.n	80003c4 <__udivmoddi4+0x150>
 80002d0:	2200      	movs	r2, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	9200      	str	r2, [sp, #0]
 80002d6:	9301      	str	r3, [sp, #4]
 80002d8:	2301      	movs	r3, #1
 80002da:	465a      	mov	r2, fp
 80002dc:	4093      	lsls	r3, r2
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	2301      	movs	r3, #1
 80002e2:	4642      	mov	r2, r8
 80002e4:	4093      	lsls	r3, r2
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	e019      	b.n	800031e <__udivmoddi4+0xaa>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	d9d0      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002ee:	2200      	movs	r2, #0
 80002f0:	2300      	movs	r3, #0
 80002f2:	9200      	str	r2, [sp, #0]
 80002f4:	9301      	str	r3, [sp, #4]
 80002f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <__udivmoddi4+0x8c>
 80002fc:	601c      	str	r4, [r3, #0]
 80002fe:	605d      	str	r5, [r3, #4]
 8000300:	9800      	ldr	r0, [sp, #0]
 8000302:	9901      	ldr	r1, [sp, #4]
 8000304:	b003      	add	sp, #12
 8000306:	bc3c      	pop	{r2, r3, r4, r5}
 8000308:	4690      	mov	r8, r2
 800030a:	4699      	mov	r9, r3
 800030c:	46a2      	mov	sl, r4
 800030e:	46ab      	mov	fp, r5
 8000310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000312:	42a3      	cmp	r3, r4
 8000314:	d9d6      	bls.n	80002c4 <__udivmoddi4+0x50>
 8000316:	2200      	movs	r2, #0
 8000318:	2300      	movs	r3, #0
 800031a:	9200      	str	r2, [sp, #0]
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	4643      	mov	r3, r8
 8000320:	2b00      	cmp	r3, #0
 8000322:	d0e8      	beq.n	80002f6 <__udivmoddi4+0x82>
 8000324:	07fb      	lsls	r3, r7, #31
 8000326:	0872      	lsrs	r2, r6, #1
 8000328:	431a      	orrs	r2, r3
 800032a:	4646      	mov	r6, r8
 800032c:	087b      	lsrs	r3, r7, #1
 800032e:	e00e      	b.n	800034e <__udivmoddi4+0xda>
 8000330:	42ab      	cmp	r3, r5
 8000332:	d101      	bne.n	8000338 <__udivmoddi4+0xc4>
 8000334:	42a2      	cmp	r2, r4
 8000336:	d80c      	bhi.n	8000352 <__udivmoddi4+0xde>
 8000338:	1aa4      	subs	r4, r4, r2
 800033a:	419d      	sbcs	r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	1924      	adds	r4, r4, r4
 8000340:	416d      	adcs	r5, r5
 8000342:	2100      	movs	r1, #0
 8000344:	3e01      	subs	r6, #1
 8000346:	1824      	adds	r4, r4, r0
 8000348:	414d      	adcs	r5, r1
 800034a:	2e00      	cmp	r6, #0
 800034c:	d006      	beq.n	800035c <__udivmoddi4+0xe8>
 800034e:	42ab      	cmp	r3, r5
 8000350:	d9ee      	bls.n	8000330 <__udivmoddi4+0xbc>
 8000352:	3e01      	subs	r6, #1
 8000354:	1924      	adds	r4, r4, r4
 8000356:	416d      	adcs	r5, r5
 8000358:	2e00      	cmp	r6, #0
 800035a:	d1f8      	bne.n	800034e <__udivmoddi4+0xda>
 800035c:	465b      	mov	r3, fp
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	1900      	adds	r0, r0, r4
 8000364:	4169      	adcs	r1, r5
 8000366:	2b00      	cmp	r3, #0
 8000368:	db22      	blt.n	80003b0 <__udivmoddi4+0x13c>
 800036a:	002b      	movs	r3, r5
 800036c:	465a      	mov	r2, fp
 800036e:	40d3      	lsrs	r3, r2
 8000370:	002a      	movs	r2, r5
 8000372:	4644      	mov	r4, r8
 8000374:	40e2      	lsrs	r2, r4
 8000376:	001c      	movs	r4, r3
 8000378:	465b      	mov	r3, fp
 800037a:	0015      	movs	r5, r2
 800037c:	2b00      	cmp	r3, #0
 800037e:	db2c      	blt.n	80003da <__udivmoddi4+0x166>
 8000380:	0026      	movs	r6, r4
 8000382:	409e      	lsls	r6, r3
 8000384:	0033      	movs	r3, r6
 8000386:	0026      	movs	r6, r4
 8000388:	4647      	mov	r7, r8
 800038a:	40be      	lsls	r6, r7
 800038c:	0032      	movs	r2, r6
 800038e:	1a80      	subs	r0, r0, r2
 8000390:	4199      	sbcs	r1, r3
 8000392:	9000      	str	r0, [sp, #0]
 8000394:	9101      	str	r1, [sp, #4]
 8000396:	e7ae      	b.n	80002f6 <__udivmoddi4+0x82>
 8000398:	4642      	mov	r2, r8
 800039a:	2320      	movs	r3, #32
 800039c:	1a9b      	subs	r3, r3, r2
 800039e:	4652      	mov	r2, sl
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	4641      	mov	r1, r8
 80003a4:	0013      	movs	r3, r2
 80003a6:	464a      	mov	r2, r9
 80003a8:	408a      	lsls	r2, r1
 80003aa:	0017      	movs	r7, r2
 80003ac:	431f      	orrs	r7, r3
 80003ae:	e782      	b.n	80002b6 <__udivmoddi4+0x42>
 80003b0:	4642      	mov	r2, r8
 80003b2:	2320      	movs	r3, #32
 80003b4:	1a9b      	subs	r3, r3, r2
 80003b6:	002a      	movs	r2, r5
 80003b8:	4646      	mov	r6, r8
 80003ba:	409a      	lsls	r2, r3
 80003bc:	0023      	movs	r3, r4
 80003be:	40f3      	lsrs	r3, r6
 80003c0:	4313      	orrs	r3, r2
 80003c2:	e7d5      	b.n	8000370 <__udivmoddi4+0xfc>
 80003c4:	4642      	mov	r2, r8
 80003c6:	2320      	movs	r3, #32
 80003c8:	2100      	movs	r1, #0
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	9100      	str	r1, [sp, #0]
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	2201      	movs	r2, #1
 80003d4:	40da      	lsrs	r2, r3
 80003d6:	9201      	str	r2, [sp, #4]
 80003d8:	e782      	b.n	80002e0 <__udivmoddi4+0x6c>
 80003da:	4642      	mov	r2, r8
 80003dc:	2320      	movs	r3, #32
 80003de:	0026      	movs	r6, r4
 80003e0:	1a9b      	subs	r3, r3, r2
 80003e2:	40de      	lsrs	r6, r3
 80003e4:	002f      	movs	r7, r5
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4097      	lsls	r7, r2
 80003ea:	4666      	mov	r6, ip
 80003ec:	003b      	movs	r3, r7
 80003ee:	4333      	orrs	r3, r6
 80003f0:	e7c9      	b.n	8000386 <__udivmoddi4+0x112>
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__clzdi2>:
 80003f4:	b510      	push	{r4, lr}
 80003f6:	2900      	cmp	r1, #0
 80003f8:	d103      	bne.n	8000402 <__clzdi2+0xe>
 80003fa:	f000 f807 	bl	800040c <__clzsi2>
 80003fe:	3020      	adds	r0, #32
 8000400:	e002      	b.n	8000408 <__clzdi2+0x14>
 8000402:	1c08      	adds	r0, r1, #0
 8000404:	f000 f802 	bl	800040c <__clzsi2>
 8000408:	bd10      	pop	{r4, pc}
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzsi2>:
 800040c:	211c      	movs	r1, #28
 800040e:	2301      	movs	r3, #1
 8000410:	041b      	lsls	r3, r3, #16
 8000412:	4298      	cmp	r0, r3
 8000414:	d301      	bcc.n	800041a <__clzsi2+0xe>
 8000416:	0c00      	lsrs	r0, r0, #16
 8000418:	3910      	subs	r1, #16
 800041a:	0a1b      	lsrs	r3, r3, #8
 800041c:	4298      	cmp	r0, r3
 800041e:	d301      	bcc.n	8000424 <__clzsi2+0x18>
 8000420:	0a00      	lsrs	r0, r0, #8
 8000422:	3908      	subs	r1, #8
 8000424:	091b      	lsrs	r3, r3, #4
 8000426:	4298      	cmp	r0, r3
 8000428:	d301      	bcc.n	800042e <__clzsi2+0x22>
 800042a:	0900      	lsrs	r0, r0, #4
 800042c:	3904      	subs	r1, #4
 800042e:	a202      	add	r2, pc, #8	; (adr r2, 8000438 <__clzsi2+0x2c>)
 8000430:	5c10      	ldrb	r0, [r2, r0]
 8000432:	1840      	adds	r0, r0, r1
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	02020304 	.word	0x02020304
 800043c:	01010101 	.word	0x01010101
	...

08000448 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000448:	21fa      	movs	r1, #250	; 0xfa
 800044a:	4b0a      	ldr	r3, [pc, #40]	; (8000474 <HAL_InitTick+0x2c>)
{
 800044c:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 800044e:	0089      	lsls	r1, r1, #2
{
 8000450:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000452:	6818      	ldr	r0, [r3, #0]
 8000454:	f7ff fe62 	bl	800011c <__udivsi3>
 8000458:	f000 f860 	bl	800051c <HAL_SYSTICK_Config>
 800045c:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 800045e:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000460:	2c00      	cmp	r4, #0
 8000462:	d105      	bne.n	8000470 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000464:	3802      	subs	r0, #2
 8000466:	0022      	movs	r2, r4
 8000468:	0029      	movs	r1, r5
 800046a:	f000 f827 	bl	80004bc <HAL_NVIC_SetPriority>
 800046e:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	20000004 	.word	0x20000004

08000478 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000478:	2340      	movs	r3, #64	; 0x40
 800047a:	4a08      	ldr	r2, [pc, #32]	; (800049c <HAL_Init+0x24>)
{
 800047c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800047e:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000480:	2003      	movs	r0, #3
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000482:	430b      	orrs	r3, r1
 8000484:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000486:	f7ff ffdf 	bl	8000448 <HAL_InitTick>
 800048a:	1e04      	subs	r4, r0, #0
 800048c:	d103      	bne.n	8000496 <HAL_Init+0x1e>
    HAL_MspInit();
 800048e:	f001 fd35 	bl	8001efc <HAL_MspInit>
}
 8000492:	0020      	movs	r0, r4
 8000494:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000496:	2401      	movs	r4, #1
 8000498:	e7fb      	b.n	8000492 <HAL_Init+0x1a>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	40022000 	.word	0x40022000

080004a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80004a0:	4a02      	ldr	r2, [pc, #8]	; (80004ac <HAL_IncTick+0xc>)
 80004a2:	6813      	ldr	r3, [r2, #0]
 80004a4:	3301      	adds	r3, #1
 80004a6:	6013      	str	r3, [r2, #0]
}
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	20000d68 	.word	0x20000d68

080004b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004b0:	4b01      	ldr	r3, [pc, #4]	; (80004b8 <HAL_GetTick+0x8>)
 80004b2:	6818      	ldr	r0, [r3, #0]
}
 80004b4:	4770      	bx	lr
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	20000d68 	.word	0x20000d68

080004bc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004bc:	b570      	push	{r4, r5, r6, lr}
 80004be:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80004c0:	2800      	cmp	r0, #0
 80004c2:	da14      	bge.n	80004ee <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c4:	230f      	movs	r3, #15
 80004c6:	b2c0      	uxtb	r0, r0
 80004c8:	4003      	ands	r3, r0
 80004ca:	3b08      	subs	r3, #8
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_NVIC_SetPriority+0x58>)
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	189b      	adds	r3, r3, r2
 80004d4:	2203      	movs	r2, #3
 80004d6:	4010      	ands	r0, r2
 80004d8:	4090      	lsls	r0, r2
 80004da:	32fc      	adds	r2, #252	; 0xfc
 80004dc:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004de:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e2:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004e4:	69dc      	ldr	r4, [r3, #28]
 80004e6:	43ac      	bics	r4, r5
 80004e8:	4321      	orrs	r1, r4
 80004ea:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004ec:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ee:	2503      	movs	r5, #3
 80004f0:	0883      	lsrs	r3, r0, #2
 80004f2:	4028      	ands	r0, r5
 80004f4:	40a8      	lsls	r0, r5
 80004f6:	35fc      	adds	r5, #252	; 0xfc
 80004f8:	002e      	movs	r6, r5
 80004fa:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_NVIC_SetPriority+0x5c>)
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	189b      	adds	r3, r3, r2
 8000500:	22c0      	movs	r2, #192	; 0xc0
 8000502:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000504:	4029      	ands	r1, r5
 8000506:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	0092      	lsls	r2, r2, #2
 800050a:	589c      	ldr	r4, [r3, r2]
 800050c:	43b4      	bics	r4, r6
 800050e:	4321      	orrs	r1, r4
 8000510:	5099      	str	r1, [r3, r2]
 8000512:	e7eb      	b.n	80004ec <HAL_NVIC_SetPriority+0x30>
 8000514:	e000ed00 	.word	0xe000ed00
 8000518:	e000e100 	.word	0xe000e100

0800051c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <HAL_SYSTICK_Config+0x28>)
 800051e:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000520:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000522:	4293      	cmp	r3, r2
 8000524:	d80d      	bhi.n	8000542 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000526:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000528:	4a07      	ldr	r2, [pc, #28]	; (8000548 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052a:	4808      	ldr	r0, [pc, #32]	; (800054c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800052c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052e:	6a03      	ldr	r3, [r0, #32]
 8000530:	0609      	lsls	r1, r1, #24
 8000532:	021b      	lsls	r3, r3, #8
 8000534:	0a1b      	lsrs	r3, r3, #8
 8000536:	430b      	orrs	r3, r1
 8000538:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800053a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800053c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800053e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000540:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000542:	4770      	bx	lr
 8000544:	00ffffff 	.word	0x00ffffff
 8000548:	e000e010 	.word	0xe000e010
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000550:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000552:	4a50      	ldr	r2, [pc, #320]	; (8000694 <HAL_GPIO_Init+0x144>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8000554:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000556:	1882      	adds	r2, r0, r2
 8000558:	1e54      	subs	r4, r2, #1
 800055a:	41a2      	sbcs	r2, r4
{
 800055c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 800055e:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 8000560:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000562:	3205      	adds	r2, #5
 8000564:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000566:	9a01      	ldr	r2, [sp, #4]
 8000568:	40da      	lsrs	r2, r3
 800056a:	d101      	bne.n	8000570 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800056c:	b005      	add	sp, #20
 800056e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000570:	2501      	movs	r5, #1
 8000572:	409d      	lsls	r5, r3
 8000574:	9a01      	ldr	r2, [sp, #4]
 8000576:	402a      	ands	r2, r5
 8000578:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800057a:	d100      	bne.n	800057e <HAL_GPIO_Init+0x2e>
 800057c:	e088      	b.n	8000690 <HAL_GPIO_Init+0x140>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800057e:	684a      	ldr	r2, [r1, #4]
 8000580:	4694      	mov	ip, r2
 8000582:	2210      	movs	r2, #16
 8000584:	4664      	mov	r4, ip
 8000586:	4394      	bics	r4, r2
 8000588:	0022      	movs	r2, r4
 800058a:	3c01      	subs	r4, #1
 800058c:	2a02      	cmp	r2, #2
 800058e:	d11f      	bne.n	80005d0 <HAL_GPIO_Init+0x80>
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000590:	2407      	movs	r4, #7
 8000592:	270f      	movs	r7, #15
 8000594:	401c      	ands	r4, r3
 8000596:	00a4      	lsls	r4, r4, #2
 8000598:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 800059a:	08da      	lsrs	r2, r3, #3
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	1882      	adds	r2, r0, r2
 80005a0:	6a16      	ldr	r6, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80005a2:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80005a4:	690f      	ldr	r7, [r1, #16]
 80005a6:	40a7      	lsls	r7, r4
 80005a8:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80005aa:	6216      	str	r6, [r2, #32]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005ac:	2403      	movs	r4, #3
 80005ae:	005e      	lsls	r6, r3, #1
 80005b0:	40b4      	lsls	r4, r6
        temp = GPIOx->OSPEEDR;
 80005b2:	6882      	ldr	r2, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80005b4:	43a2      	bics	r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80005b6:	68cc      	ldr	r4, [r1, #12]
 80005b8:	40b4      	lsls	r4, r6
 80005ba:	4322      	orrs	r2, r4
        GPIOx->OSPEEDR = temp;
 80005bc:	6082      	str	r2, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005be:	4662      	mov	r2, ip
 80005c0:	06d2      	lsls	r2, r2, #27
 80005c2:	0fd2      	lsrs	r2, r2, #31
 80005c4:	409a      	lsls	r2, r3
        temp= GPIOx->OTYPER;
 80005c6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005c8:	43ac      	bics	r4, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005ca:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005cc:	6042      	str	r2, [r0, #4]
 80005ce:	e001      	b.n	80005d4 <HAL_GPIO_Init+0x84>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005d0:	2c01      	cmp	r4, #1
 80005d2:	d9eb      	bls.n	80005ac <HAL_GPIO_Init+0x5c>
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005d4:	2403      	movs	r4, #3
 80005d6:	0025      	movs	r5, r4
 80005d8:	005e      	lsls	r6, r3, #1
 80005da:	40b5      	lsls	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005dc:	4662      	mov	r2, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005de:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e0:	4022      	ands	r2, r4
 80005e2:	40b2      	lsls	r2, r6
      temp = GPIOx->MODER;
 80005e4:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80005e6:	402f      	ands	r7, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005e8:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 80005ea:	6002      	str	r2, [r0, #0]
      temp = GPIOx->PUPDR;
 80005ec:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80005ee:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80005f0:	688a      	ldr	r2, [r1, #8]
 80005f2:	40b2      	lsls	r2, r6
 80005f4:	4315      	orrs	r5, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005f6:	4662      	mov	r2, ip
      GPIOx->PUPDR = temp;
 80005f8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80005fa:	00d2      	lsls	r2, r2, #3
 80005fc:	d548      	bpl.n	8000690 <HAL_GPIO_Init+0x140>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fe:	2701      	movs	r7, #1
 8000600:	4d25      	ldr	r5, [pc, #148]	; (8000698 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000602:	401c      	ands	r4, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000604:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000606:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000608:	433a      	orrs	r2, r7
 800060a:	636a      	str	r2, [r5, #52]	; 0x34
 800060c:	4a23      	ldr	r2, [pc, #140]	; (800069c <HAL_GPIO_Init+0x14c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800060e:	089d      	lsrs	r5, r3, #2
 8000610:	00ad      	lsls	r5, r5, #2
 8000612:	18ad      	adds	r5, r5, r2
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000614:	220f      	movs	r2, #15
 8000616:	40a2      	lsls	r2, r4
        temp = SYSCFG->EXTICR[position >> 2U];
 8000618:	68ae      	ldr	r6, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800061a:	4396      	bics	r6, r2
 800061c:	9602      	str	r6, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800061e:	26a0      	movs	r6, #160	; 0xa0
 8000620:	2200      	movs	r2, #0
 8000622:	05f6      	lsls	r6, r6, #23
 8000624:	42b0      	cmp	r0, r6
 8000626:	d008      	beq.n	800063a <HAL_GPIO_Init+0xea>
 8000628:	4e1d      	ldr	r6, [pc, #116]	; (80006a0 <HAL_GPIO_Init+0x150>)
 800062a:	003a      	movs	r2, r7
 800062c:	42b0      	cmp	r0, r6
 800062e:	d004      	beq.n	800063a <HAL_GPIO_Init+0xea>
 8000630:	4f1c      	ldr	r7, [pc, #112]	; (80006a4 <HAL_GPIO_Init+0x154>)
 8000632:	1892      	adds	r2, r2, r2
 8000634:	42b8      	cmp	r0, r7
 8000636:	d000      	beq.n	800063a <HAL_GPIO_Init+0xea>
 8000638:	9a03      	ldr	r2, [sp, #12]
 800063a:	40a2      	lsls	r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800063c:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800063e:	9c02      	ldr	r4, [sp, #8]
 8000640:	4322      	orrs	r2, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000642:	60aa      	str	r2, [r5, #8]
        temp = EXTI->IMR;
 8000644:	4a18      	ldr	r2, [pc, #96]	; (80006a8 <HAL_GPIO_Init+0x158>)
        temp &= ~((uint32_t)iocurrent);
 8000646:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000648:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800064a:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 800064c:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 800064e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000650:	03ff      	lsls	r7, r7, #15
 8000652:	d401      	bmi.n	8000658 <HAL_GPIO_Init+0x108>
        temp &= ~((uint32_t)iocurrent);
 8000654:	0035      	movs	r5, r6
 8000656:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000658:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800065a:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800065c:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 800065e:	9d00      	ldr	r5, [sp, #0]
 8000660:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000662:	03bf      	lsls	r7, r7, #14
 8000664:	d401      	bmi.n	800066a <HAL_GPIO_Init+0x11a>
        temp &= ~((uint32_t)iocurrent);
 8000666:	0035      	movs	r5, r6
 8000668:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800066a:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800066c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800066e:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8000670:	9d00      	ldr	r5, [sp, #0]
 8000672:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000674:	02ff      	lsls	r7, r7, #11
 8000676:	d401      	bmi.n	800067c <HAL_GPIO_Init+0x12c>
        temp &= ~((uint32_t)iocurrent);
 8000678:	0035      	movs	r5, r6
 800067a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800067c:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 800067e:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000680:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8000682:	9e00      	ldr	r6, [sp, #0]
 8000684:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000686:	02bf      	lsls	r7, r7, #10
 8000688:	d401      	bmi.n	800068e <HAL_GPIO_Init+0x13e>
        temp &= ~((uint32_t)iocurrent);
 800068a:	4025      	ands	r5, r4
 800068c:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 800068e:	60d6      	str	r6, [r2, #12]
    position++;
 8000690:	3301      	adds	r3, #1
 8000692:	e768      	b.n	8000566 <HAL_GPIO_Init+0x16>
 8000694:	afffe400 	.word	0xafffe400
 8000698:	40021000 	.word	0x40021000
 800069c:	40010000 	.word	0x40010000
 80006a0:	50000400 	.word	0x50000400
 80006a4:	50000800 	.word	0x50000800
 80006a8:	40010400 	.word	0x40010400

080006ac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80006ac:	2a00      	cmp	r2, #0
 80006ae:	d001      	beq.n	80006b4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80006b0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006b2:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80006b4:	6281      	str	r1, [r0, #40]	; 0x28
}
 80006b6:	e7fc      	b.n	80006b2 <HAL_GPIO_WritePin+0x6>

080006b8 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80006b8:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80006bc:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 80006be:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 80006c0:	400a      	ands	r2, r1
 80006c2:	2a08      	cmp	r2, #8
 80006c4:	d026      	beq.n	8000714 <HAL_RCC_GetSysClockFreq+0x5c>
 80006c6:	2a0c      	cmp	r2, #12
 80006c8:	d006      	beq.n	80006d8 <HAL_RCC_GetSysClockFreq+0x20>
 80006ca:	2a04      	cmp	r2, #4
 80006cc:	d11a      	bne.n	8000704 <HAL_RCC_GetSysClockFreq+0x4c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	06db      	lsls	r3, r3, #27
 80006d2:	d421      	bmi.n	8000718 <HAL_RCC_GetSysClockFreq+0x60>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80006d4:	4812      	ldr	r0, [pc, #72]	; (8000720 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80006d6:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80006d8:	028a      	lsls	r2, r1, #10
 80006da:	4812      	ldr	r0, [pc, #72]	; (8000724 <HAL_RCC_GetSysClockFreq+0x6c>)
 80006dc:	0f12      	lsrs	r2, r2, #28
 80006de:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80006e0:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80006e2:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80006e4:	0f89      	lsrs	r1, r1, #30
 80006e6:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80006e8:	03c0      	lsls	r0, r0, #15
 80006ea:	d504      	bpl.n	80006f6 <HAL_RCC_GetSysClockFreq+0x3e>
        pllvco = (HSE_VALUE * pllm) / plld;
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <HAL_RCC_GetSysClockFreq+0x70>)
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80006ee:	4350      	muls	r0, r2
 80006f0:	f7ff fd14 	bl	800011c <__udivsi3>
 80006f4:	e7ef      	b.n	80006d6 <HAL_RCC_GetSysClockFreq+0x1e>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	06db      	lsls	r3, r3, #27
 80006fa:	d501      	bpl.n	8000700 <HAL_RCC_GetSysClockFreq+0x48>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80006fc:	480b      	ldr	r0, [pc, #44]	; (800072c <HAL_RCC_GetSysClockFreq+0x74>)
 80006fe:	e7f6      	b.n	80006ee <HAL_RCC_GetSysClockFreq+0x36>
         pllvco = (HSI_VALUE * pllm) / plld;
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <HAL_RCC_GetSysClockFreq+0x68>)
 8000702:	e7f4      	b.n	80006ee <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000704:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000706:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000708:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800070a:	041b      	lsls	r3, r3, #16
 800070c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800070e:	3301      	adds	r3, #1
 8000710:	4098      	lsls	r0, r3
 8000712:	e7e0      	b.n	80006d6 <HAL_RCC_GetSysClockFreq+0x1e>
      sysclockfreq = HSE_VALUE;
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <HAL_RCC_GetSysClockFreq+0x70>)
 8000716:	e7de      	b.n	80006d6 <HAL_RCC_GetSysClockFreq+0x1e>
        sysclockfreq =  (HSI_VALUE >> 2);
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 800071a:	e7dc      	b.n	80006d6 <HAL_RCC_GetSysClockFreq+0x1e>
 800071c:	40021000 	.word	0x40021000
 8000720:	00f42400 	.word	0x00f42400
 8000724:	08002132 	.word	0x08002132
 8000728:	007a1200 	.word	0x007a1200
 800072c:	003d0900 	.word	0x003d0900

08000730 <HAL_RCC_OscConfig>:
{
 8000730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000732:	0005      	movs	r5, r0
 8000734:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8000736:	2800      	cmp	r0, #0
 8000738:	d102      	bne.n	8000740 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800073a:	2001      	movs	r0, #1
}
 800073c:	b007      	add	sp, #28
 800073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000740:	230c      	movs	r3, #12
 8000742:	4cc0      	ldr	r4, [pc, #768]	; (8000a44 <HAL_RCC_OscConfig+0x314>)
 8000744:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000746:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000748:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	025b      	lsls	r3, r3, #9
 800074e:	401a      	ands	r2, r3
 8000750:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000752:	6802      	ldr	r2, [r0, #0]
 8000754:	07d2      	lsls	r2, r2, #31
 8000756:	d43d      	bmi.n	80007d4 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000758:	682b      	ldr	r3, [r5, #0]
 800075a:	079b      	lsls	r3, r3, #30
 800075c:	d500      	bpl.n	8000760 <HAL_RCC_OscConfig+0x30>
 800075e:	e083      	b.n	8000868 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000760:	682b      	ldr	r3, [r5, #0]
 8000762:	06db      	lsls	r3, r3, #27
 8000764:	d528      	bpl.n	80007b8 <HAL_RCC_OscConfig+0x88>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000766:	2e00      	cmp	r6, #0
 8000768:	d000      	beq.n	800076c <HAL_RCC_OscConfig+0x3c>
 800076a:	e0dd      	b.n	8000928 <HAL_RCC_OscConfig+0x1f8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	059b      	lsls	r3, r3, #22
 8000770:	d502      	bpl.n	8000778 <HAL_RCC_OscConfig+0x48>
 8000772:	69ab      	ldr	r3, [r5, #24]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0e0      	beq.n	800073a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000778:	6862      	ldr	r2, [r4, #4]
 800077a:	49b3      	ldr	r1, [pc, #716]	; (8000a48 <HAL_RCC_OscConfig+0x318>)
 800077c:	6a2b      	ldr	r3, [r5, #32]
 800077e:	400a      	ands	r2, r1
 8000780:	431a      	orrs	r2, r3
 8000782:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000784:	6861      	ldr	r1, [r4, #4]
 8000786:	69ea      	ldr	r2, [r5, #28]
 8000788:	0209      	lsls	r1, r1, #8
 800078a:	0a09      	lsrs	r1, r1, #8
 800078c:	0612      	lsls	r2, r2, #24
 800078e:	430a      	orrs	r2, r1
 8000790:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	0b5b      	lsrs	r3, r3, #13
 8000796:	3301      	adds	r3, #1
 8000798:	0212      	lsls	r2, r2, #8
 800079a:	409a      	lsls	r2, r3
 800079c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800079e:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80007a0:	2003      	movs	r0, #3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80007a2:	060a      	lsls	r2, r1, #24
 80007a4:	49a9      	ldr	r1, [pc, #676]	; (8000a4c <HAL_RCC_OscConfig+0x31c>)
 80007a6:	0f12      	lsrs	r2, r2, #28
 80007a8:	5c8a      	ldrb	r2, [r1, r2]
 80007aa:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80007ac:	4aa8      	ldr	r2, [pc, #672]	; (8000a50 <HAL_RCC_OscConfig+0x320>)
 80007ae:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80007b0:	f7ff fe4a 	bl	8000448 <HAL_InitTick>
        if(status != HAL_OK)
 80007b4:	2800      	cmp	r0, #0
 80007b6:	d1c1      	bne.n	800073c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007b8:	682b      	ldr	r3, [r5, #0]
 80007ba:	071b      	lsls	r3, r3, #28
 80007bc:	d500      	bpl.n	80007c0 <HAL_RCC_OscConfig+0x90>
 80007be:	e0ea      	b.n	8000996 <HAL_RCC_OscConfig+0x266>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007c0:	682b      	ldr	r3, [r5, #0]
 80007c2:	075b      	lsls	r3, r3, #29
 80007c4:	d500      	bpl.n	80007c8 <HAL_RCC_OscConfig+0x98>
 80007c6:	e10c      	b.n	80009e2 <HAL_RCC_OscConfig+0x2b2>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d000      	beq.n	80007d0 <HAL_RCC_OscConfig+0xa0>
 80007ce:	e191      	b.n	8000af4 <HAL_RCC_OscConfig+0x3c4>
  return HAL_OK;
 80007d0:	2000      	movs	r0, #0
 80007d2:	e7b3      	b.n	800073c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80007d4:	2e08      	cmp	r6, #8
 80007d6:	d004      	beq.n	80007e2 <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80007d8:	2e0c      	cmp	r6, #12
 80007da:	d109      	bne.n	80007f0 <HAL_RCC_OscConfig+0xc0>
 80007dc:	9a01      	ldr	r2, [sp, #4]
 80007de:	2a00      	cmp	r2, #0
 80007e0:	d006      	beq.n	80007f0 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007e2:	6823      	ldr	r3, [r4, #0]
 80007e4:	039b      	lsls	r3, r3, #14
 80007e6:	d5b7      	bpl.n	8000758 <HAL_RCC_OscConfig+0x28>
 80007e8:	686b      	ldr	r3, [r5, #4]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1b4      	bne.n	8000758 <HAL_RCC_OscConfig+0x28>
 80007ee:	e7a4      	b.n	800073a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007f0:	686a      	ldr	r2, [r5, #4]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d111      	bne.n	800081a <HAL_RCC_OscConfig+0xea>
 80007f6:	6822      	ldr	r2, [r4, #0]
 80007f8:	4313      	orrs	r3, r2
 80007fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007fc:	f7ff fe58 	bl	80004b0 <HAL_GetTick>
 8000800:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	0292      	lsls	r2, r2, #10
 8000808:	4213      	tst	r3, r2
 800080a:	d1a5      	bne.n	8000758 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800080c:	f7ff fe50 	bl	80004b0 <HAL_GetTick>
 8000810:	1bc0      	subs	r0, r0, r7
 8000812:	2864      	cmp	r0, #100	; 0x64
 8000814:	d9f5      	bls.n	8000802 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8000816:	2003      	movs	r0, #3
 8000818:	e790      	b.n	800073c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800081a:	21a0      	movs	r1, #160	; 0xa0
 800081c:	02c9      	lsls	r1, r1, #11
 800081e:	428a      	cmp	r2, r1
 8000820:	d105      	bne.n	800082e <HAL_RCC_OscConfig+0xfe>
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	6821      	ldr	r1, [r4, #0]
 8000826:	02d2      	lsls	r2, r2, #11
 8000828:	430a      	orrs	r2, r1
 800082a:	6022      	str	r2, [r4, #0]
 800082c:	e7e3      	b.n	80007f6 <HAL_RCC_OscConfig+0xc6>
 800082e:	6821      	ldr	r1, [r4, #0]
 8000830:	4888      	ldr	r0, [pc, #544]	; (8000a54 <HAL_RCC_OscConfig+0x324>)
 8000832:	4001      	ands	r1, r0
 8000834:	6021      	str	r1, [r4, #0]
 8000836:	6821      	ldr	r1, [r4, #0]
 8000838:	400b      	ands	r3, r1
 800083a:	9305      	str	r3, [sp, #20]
 800083c:	9b05      	ldr	r3, [sp, #20]
 800083e:	4986      	ldr	r1, [pc, #536]	; (8000a58 <HAL_RCC_OscConfig+0x328>)
 8000840:	6823      	ldr	r3, [r4, #0]
 8000842:	400b      	ands	r3, r1
 8000844:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000846:	2a00      	cmp	r2, #0
 8000848:	d1d8      	bne.n	80007fc <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 800084a:	f7ff fe31 	bl	80004b0 <HAL_GetTick>
 800084e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	6823      	ldr	r3, [r4, #0]
 8000854:	0292      	lsls	r2, r2, #10
 8000856:	4213      	tst	r3, r2
 8000858:	d100      	bne.n	800085c <HAL_RCC_OscConfig+0x12c>
 800085a:	e77d      	b.n	8000758 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800085c:	f7ff fe28 	bl	80004b0 <HAL_GetTick>
 8000860:	1bc0      	subs	r0, r0, r7
 8000862:	2864      	cmp	r0, #100	; 0x64
 8000864:	d9f4      	bls.n	8000850 <HAL_RCC_OscConfig+0x120>
 8000866:	e7d6      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8000868:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800086a:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800086c:	4213      	tst	r3, r2
 800086e:	d003      	beq.n	8000878 <HAL_RCC_OscConfig+0x148>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000870:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8000872:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8000874:	4311      	orrs	r1, r2
 8000876:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000878:	2e04      	cmp	r6, #4
 800087a:	d004      	beq.n	8000886 <HAL_RCC_OscConfig+0x156>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800087c:	2e0c      	cmp	r6, #12
 800087e:	d125      	bne.n	80008cc <HAL_RCC_OscConfig+0x19c>
 8000880:	9a01      	ldr	r2, [sp, #4]
 8000882:	2a00      	cmp	r2, #0
 8000884:	d122      	bne.n	80008cc <HAL_RCC_OscConfig+0x19c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8000886:	6822      	ldr	r2, [r4, #0]
 8000888:	0752      	lsls	r2, r2, #29
 800088a:	d502      	bpl.n	8000892 <HAL_RCC_OscConfig+0x162>
 800088c:	2b00      	cmp	r3, #0
 800088e:	d100      	bne.n	8000892 <HAL_RCC_OscConfig+0x162>
 8000890:	e753      	b.n	800073a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000892:	6861      	ldr	r1, [r4, #4]
 8000894:	692a      	ldr	r2, [r5, #16]
 8000896:	4871      	ldr	r0, [pc, #452]	; (8000a5c <HAL_RCC_OscConfig+0x32c>)
 8000898:	0212      	lsls	r2, r2, #8
 800089a:	4001      	ands	r1, r0
 800089c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800089e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008a0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008a2:	6822      	ldr	r2, [r4, #0]
 80008a4:	438a      	bics	r2, r1
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80008aa:	f7ff ff05 	bl	80006b8 <HAL_RCC_GetSysClockFreq>
 80008ae:	68e3      	ldr	r3, [r4, #12]
 80008b0:	4a66      	ldr	r2, [pc, #408]	; (8000a4c <HAL_RCC_OscConfig+0x31c>)
 80008b2:	061b      	lsls	r3, r3, #24
 80008b4:	0f1b      	lsrs	r3, r3, #28
 80008b6:	5cd3      	ldrb	r3, [r2, r3]
 80008b8:	40d8      	lsrs	r0, r3
 80008ba:	4b65      	ldr	r3, [pc, #404]	; (8000a50 <HAL_RCC_OscConfig+0x320>)
 80008bc:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 80008be:	2003      	movs	r0, #3
 80008c0:	f7ff fdc2 	bl	8000448 <HAL_InitTick>
      if(status != HAL_OK)
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d100      	bne.n	80008ca <HAL_RCC_OscConfig+0x19a>
 80008c8:	e74a      	b.n	8000760 <HAL_RCC_OscConfig+0x30>
 80008ca:	e737      	b.n	800073c <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d019      	beq.n	8000904 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80008d0:	2109      	movs	r1, #9
 80008d2:	6822      	ldr	r2, [r4, #0]
 80008d4:	438a      	bics	r2, r1
 80008d6:	4313      	orrs	r3, r2
 80008d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008da:	f7ff fde9 	bl	80004b0 <HAL_GetTick>
 80008de:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80008e0:	2204      	movs	r2, #4
 80008e2:	6823      	ldr	r3, [r4, #0]
 80008e4:	4213      	tst	r3, r2
 80008e6:	d007      	beq.n	80008f8 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008e8:	6862      	ldr	r2, [r4, #4]
 80008ea:	692b      	ldr	r3, [r5, #16]
 80008ec:	495b      	ldr	r1, [pc, #364]	; (8000a5c <HAL_RCC_OscConfig+0x32c>)
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	400a      	ands	r2, r1
 80008f2:	4313      	orrs	r3, r2
 80008f4:	6063      	str	r3, [r4, #4]
 80008f6:	e733      	b.n	8000760 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008f8:	f7ff fdda 	bl	80004b0 <HAL_GetTick>
 80008fc:	1bc0      	subs	r0, r0, r7
 80008fe:	2802      	cmp	r0, #2
 8000900:	d9ee      	bls.n	80008e0 <HAL_RCC_OscConfig+0x1b0>
 8000902:	e788      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 8000904:	2201      	movs	r2, #1
 8000906:	6823      	ldr	r3, [r4, #0]
 8000908:	4393      	bics	r3, r2
 800090a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800090c:	f7ff fdd0 	bl	80004b0 <HAL_GetTick>
 8000910:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000912:	2204      	movs	r2, #4
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	4213      	tst	r3, r2
 8000918:	d100      	bne.n	800091c <HAL_RCC_OscConfig+0x1ec>
 800091a:	e721      	b.n	8000760 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800091c:	f7ff fdc8 	bl	80004b0 <HAL_GetTick>
 8000920:	1bc0      	subs	r0, r0, r7
 8000922:	2802      	cmp	r0, #2
 8000924:	d9f5      	bls.n	8000912 <HAL_RCC_OscConfig+0x1e2>
 8000926:	e776      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000928:	69ab      	ldr	r3, [r5, #24]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d020      	beq.n	8000970 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_ENABLE();
 800092e:	2380      	movs	r3, #128	; 0x80
 8000930:	6822      	ldr	r2, [r4, #0]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4313      	orrs	r3, r2
 8000936:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000938:	f7ff fdba 	bl	80004b0 <HAL_GetTick>
 800093c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	0092      	lsls	r2, r2, #2
 8000944:	4213      	tst	r3, r2
 8000946:	d00d      	beq.n	8000964 <HAL_RCC_OscConfig+0x234>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000948:	6863      	ldr	r3, [r4, #4]
 800094a:	4a3f      	ldr	r2, [pc, #252]	; (8000a48 <HAL_RCC_OscConfig+0x318>)
 800094c:	4013      	ands	r3, r2
 800094e:	6a2a      	ldr	r2, [r5, #32]
 8000950:	4313      	orrs	r3, r2
 8000952:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000954:	6862      	ldr	r2, [r4, #4]
 8000956:	69eb      	ldr	r3, [r5, #28]
 8000958:	0212      	lsls	r2, r2, #8
 800095a:	061b      	lsls	r3, r3, #24
 800095c:	0a12      	lsrs	r2, r2, #8
 800095e:	4313      	orrs	r3, r2
 8000960:	6063      	str	r3, [r4, #4]
 8000962:	e729      	b.n	80007b8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000964:	f7ff fda4 	bl	80004b0 <HAL_GetTick>
 8000968:	1bc0      	subs	r0, r0, r7
 800096a:	2802      	cmp	r0, #2
 800096c:	d9e7      	bls.n	800093e <HAL_RCC_OscConfig+0x20e>
 800096e:	e752      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_MSI_DISABLE();
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	4a3b      	ldr	r2, [pc, #236]	; (8000a60 <HAL_RCC_OscConfig+0x330>)
 8000974:	4013      	ands	r3, r2
 8000976:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000978:	f7ff fd9a 	bl	80004b0 <HAL_GetTick>
 800097c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800097e:	2280      	movs	r2, #128	; 0x80
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	4213      	tst	r3, r2
 8000986:	d100      	bne.n	800098a <HAL_RCC_OscConfig+0x25a>
 8000988:	e716      	b.n	80007b8 <HAL_RCC_OscConfig+0x88>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800098a:	f7ff fd91 	bl	80004b0 <HAL_GetTick>
 800098e:	1bc0      	subs	r0, r0, r7
 8000990:	2802      	cmp	r0, #2
 8000992:	d9f4      	bls.n	800097e <HAL_RCC_OscConfig+0x24e>
 8000994:	e73f      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000996:	696a      	ldr	r2, [r5, #20]
 8000998:	2301      	movs	r3, #1
 800099a:	2a00      	cmp	r2, #0
 800099c:	d010      	beq.n	80009c0 <HAL_RCC_OscConfig+0x290>
      __HAL_RCC_LSI_ENABLE();
 800099e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80009a0:	4313      	orrs	r3, r2
 80009a2:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009a4:	f7ff fd84 	bl	80004b0 <HAL_GetTick>
 80009a8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80009aa:	2202      	movs	r2, #2
 80009ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80009ae:	4213      	tst	r3, r2
 80009b0:	d000      	beq.n	80009b4 <HAL_RCC_OscConfig+0x284>
 80009b2:	e705      	b.n	80007c0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009b4:	f7ff fd7c 	bl	80004b0 <HAL_GetTick>
 80009b8:	1bc0      	subs	r0, r0, r7
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9f5      	bls.n	80009aa <HAL_RCC_OscConfig+0x27a>
 80009be:	e72a      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
      __HAL_RCC_LSI_DISABLE();
 80009c0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80009c2:	439a      	bics	r2, r3
 80009c4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80009c6:	f7ff fd73 	bl	80004b0 <HAL_GetTick>
 80009ca:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80009cc:	2202      	movs	r2, #2
 80009ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80009d0:	4213      	tst	r3, r2
 80009d2:	d100      	bne.n	80009d6 <HAL_RCC_OscConfig+0x2a6>
 80009d4:	e6f4      	b.n	80007c0 <HAL_RCC_OscConfig+0x90>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d6:	f7ff fd6b 	bl	80004b0 <HAL_GetTick>
 80009da:	1bc0      	subs	r0, r0, r7
 80009dc:	2802      	cmp	r0, #2
 80009de:	d9f5      	bls.n	80009cc <HAL_RCC_OscConfig+0x29c>
 80009e0:	e719      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e2:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80009e4:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009e8:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80009ea:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009ec:	421a      	tst	r2, r3
 80009ee:	d104      	bne.n	80009fa <HAL_RCC_OscConfig+0x2ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80009f2:	4313      	orrs	r3, r2
 80009f4:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80009f6:	2301      	movs	r3, #1
 80009f8:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009fa:	2280      	movs	r2, #128	; 0x80
 80009fc:	4f19      	ldr	r7, [pc, #100]	; (8000a64 <HAL_RCC_OscConfig+0x334>)
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	4213      	tst	r3, r2
 8000a04:	d008      	beq.n	8000a18 <HAL_RCC_OscConfig+0x2e8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a06:	2280      	movs	r2, #128	; 0x80
 8000a08:	68ab      	ldr	r3, [r5, #8]
 8000a0a:	0052      	lsls	r2, r2, #1
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d12b      	bne.n	8000a68 <HAL_RCC_OscConfig+0x338>
 8000a10:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000a12:	4313      	orrs	r3, r2
 8000a14:	6523      	str	r3, [r4, #80]	; 0x50
 8000a16:	e04c      	b.n	8000ab2 <HAL_RCC_OscConfig+0x382>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000a22:	f7ff fd45 	bl	80004b0 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a26:	2380      	movs	r3, #128	; 0x80
 8000a28:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8000a2a:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a2c:	9303      	str	r3, [sp, #12]
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	9a03      	ldr	r2, [sp, #12]
 8000a32:	4213      	tst	r3, r2
 8000a34:	d1e7      	bne.n	8000a06 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a36:	f7ff fd3b 	bl	80004b0 <HAL_GetTick>
 8000a3a:	9b02      	ldr	r3, [sp, #8]
 8000a3c:	1ac0      	subs	r0, r0, r3
 8000a3e:	2864      	cmp	r0, #100	; 0x64
 8000a40:	d9f5      	bls.n	8000a2e <HAL_RCC_OscConfig+0x2fe>
 8000a42:	e6e8      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
 8000a44:	40021000 	.word	0x40021000
 8000a48:	ffff1fff 	.word	0xffff1fff
 8000a4c:	0800211a 	.word	0x0800211a
 8000a50:	20000004 	.word	0x20000004
 8000a54:	fffeffff 	.word	0xfffeffff
 8000a58:	fffbffff 	.word	0xfffbffff
 8000a5c:	ffffe0ff 	.word	0xffffe0ff
 8000a60:	fffffeff 	.word	0xfffffeff
 8000a64:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d116      	bne.n	8000a9a <HAL_RCC_OscConfig+0x36a>
 8000a6c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a6e:	4a53      	ldr	r2, [pc, #332]	; (8000bbc <HAL_RCC_OscConfig+0x48c>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	6523      	str	r3, [r4, #80]	; 0x50
 8000a74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a76:	4a52      	ldr	r2, [pc, #328]	; (8000bc0 <HAL_RCC_OscConfig+0x490>)
 8000a78:	4013      	ands	r3, r2
 8000a7a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000a7c:	f7ff fd18 	bl	80004b0 <HAL_GetTick>
 8000a80:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4213      	tst	r3, r2
 8000a8a:	d02a      	beq.n	8000ae2 <HAL_RCC_OscConfig+0x3b2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a8c:	f7ff fd10 	bl	80004b0 <HAL_GetTick>
 8000a90:	4b4c      	ldr	r3, [pc, #304]	; (8000bc4 <HAL_RCC_OscConfig+0x494>)
 8000a92:	1bc0      	subs	r0, r0, r7
 8000a94:	4298      	cmp	r0, r3
 8000a96:	d9f4      	bls.n	8000a82 <HAL_RCC_OscConfig+0x352>
 8000a98:	e6bd      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9a:	21a0      	movs	r1, #160	; 0xa0
 8000a9c:	00c9      	lsls	r1, r1, #3
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d10b      	bne.n	8000aba <HAL_RCC_OscConfig+0x38a>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6523      	str	r3, [r4, #80]	; 0x50
 8000aac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8000ab2:	f7ff fcfd 	bl	80004b0 <HAL_GetTick>
 8000ab6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ab8:	e00e      	b.n	8000ad8 <HAL_RCC_OscConfig+0x3a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aba:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000abc:	4a3f      	ldr	r2, [pc, #252]	; (8000bbc <HAL_RCC_OscConfig+0x48c>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	6523      	str	r3, [r4, #80]	; 0x50
 8000ac2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ac4:	4a3e      	ldr	r2, [pc, #248]	; (8000bc0 <HAL_RCC_OscConfig+0x490>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	e7a4      	b.n	8000a14 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aca:	f7ff fcf1 	bl	80004b0 <HAL_GetTick>
 8000ace:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <HAL_RCC_OscConfig+0x494>)
 8000ad0:	1bc0      	subs	r0, r0, r7
 8000ad2:	4298      	cmp	r0, r3
 8000ad4:	d900      	bls.n	8000ad8 <HAL_RCC_OscConfig+0x3a8>
 8000ad6:	e69e      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000adc:	0092      	lsls	r2, r2, #2
 8000ade:	4213      	tst	r3, r2
 8000ae0:	d0f3      	beq.n	8000aca <HAL_RCC_OscConfig+0x39a>
    if(pwrclkchanged == SET)
 8000ae2:	9b01      	ldr	r3, [sp, #4]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d000      	beq.n	8000aea <HAL_RCC_OscConfig+0x3ba>
 8000ae8:	e66e      	b.n	80007c8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000aec:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <HAL_RCC_OscConfig+0x498>)
 8000aee:	4013      	ands	r3, r2
 8000af0:	63a3      	str	r3, [r4, #56]	; 0x38
 8000af2:	e669      	b.n	80007c8 <HAL_RCC_OscConfig+0x98>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000af4:	2e0c      	cmp	r6, #12
 8000af6:	d043      	beq.n	8000b80 <HAL_RCC_OscConfig+0x450>
 8000af8:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <HAL_RCC_OscConfig+0x49c>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000afa:	2b02      	cmp	r3, #2
 8000afc:	d12e      	bne.n	8000b5c <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_DISABLE();
 8000afe:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b00:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000b02:	4013      	ands	r3, r2
 8000b04:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b06:	f7ff fcd3 	bl	80004b0 <HAL_GetTick>
 8000b0a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b0c:	04b6      	lsls	r6, r6, #18
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	4233      	tst	r3, r6
 8000b12:	d11d      	bne.n	8000b50 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b14:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8000b16:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b18:	68e2      	ldr	r2, [r4, #12]
 8000b1a:	430b      	orrs	r3, r1
 8000b1c:	492c      	ldr	r1, [pc, #176]	; (8000bd0 <HAL_RCC_OscConfig+0x4a0>)
 8000b1e:	400a      	ands	r2, r1
 8000b20:	4313      	orrs	r3, r2
 8000b22:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000b24:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b26:	4313      	orrs	r3, r2
 8000b28:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8000b2a:	2380      	movs	r3, #128	; 0x80
 8000b2c:	6822      	ldr	r2, [r4, #0]
 8000b2e:	045b      	lsls	r3, r3, #17
 8000b30:	4313      	orrs	r3, r2
 8000b32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b34:	f7ff fcbc 	bl	80004b0 <HAL_GetTick>
 8000b38:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8000b3a:	04ad      	lsls	r5, r5, #18
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	422b      	tst	r3, r5
 8000b40:	d000      	beq.n	8000b44 <HAL_RCC_OscConfig+0x414>
 8000b42:	e645      	b.n	80007d0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b44:	f7ff fcb4 	bl	80004b0 <HAL_GetTick>
 8000b48:	1b80      	subs	r0, r0, r6
 8000b4a:	2802      	cmp	r0, #2
 8000b4c:	d9f6      	bls.n	8000b3c <HAL_RCC_OscConfig+0x40c>
 8000b4e:	e662      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b50:	f7ff fcae 	bl	80004b0 <HAL_GetTick>
 8000b54:	1bc0      	subs	r0, r0, r7
 8000b56:	2802      	cmp	r0, #2
 8000b58:	d9d9      	bls.n	8000b0e <HAL_RCC_OscConfig+0x3de>
 8000b5a:	e65c      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_PLL_DISABLE();
 8000b5c:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b5e:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8000b60:	4013      	ands	r3, r2
 8000b62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b64:	f7ff fca4 	bl	80004b0 <HAL_GetTick>
 8000b68:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8000b6a:	04ad      	lsls	r5, r5, #18
 8000b6c:	6823      	ldr	r3, [r4, #0]
 8000b6e:	422b      	tst	r3, r5
 8000b70:	d100      	bne.n	8000b74 <HAL_RCC_OscConfig+0x444>
 8000b72:	e62d      	b.n	80007d0 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b74:	f7ff fc9c 	bl	80004b0 <HAL_GetTick>
 8000b78:	1b80      	subs	r0, r0, r6
 8000b7a:	2802      	cmp	r0, #2
 8000b7c:	d9f6      	bls.n	8000b6c <HAL_RCC_OscConfig+0x43c>
 8000b7e:	e64a      	b.n	8000816 <HAL_RCC_OscConfig+0xe6>
        return HAL_ERROR;
 8000b80:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d100      	bne.n	8000b88 <HAL_RCC_OscConfig+0x458>
 8000b86:	e5d9      	b.n	800073c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b88:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8000b8a:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b8c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8000b8e:	0252      	lsls	r2, r2, #9
 8000b90:	401a      	ands	r2, r3
        return HAL_ERROR;
 8000b92:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b94:	428a      	cmp	r2, r1
 8000b96:	d000      	beq.n	8000b9a <HAL_RCC_OscConfig+0x46a>
 8000b98:	e5d0      	b.n	800073c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000b9a:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b9c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000b9e:	0392      	lsls	r2, r2, #14
 8000ba0:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ba2:	428a      	cmp	r2, r1
 8000ba4:	d000      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x478>
 8000ba6:	e5c9      	b.n	800073c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000ba8:	20c0      	movs	r0, #192	; 0xc0
 8000baa:	0400      	lsls	r0, r0, #16
 8000bac:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000bae:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8000bb0:	1a18      	subs	r0, r3, r0
 8000bb2:	1e43      	subs	r3, r0, #1
 8000bb4:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 8000bb6:	b2c0      	uxtb	r0, r0
 8000bb8:	e5c0      	b.n	800073c <HAL_RCC_OscConfig+0xc>
 8000bba:	46c0      	nop			; (mov r8, r8)
 8000bbc:	fffffeff 	.word	0xfffffeff
 8000bc0:	fffffbff 	.word	0xfffffbff
 8000bc4:	00001388 	.word	0x00001388
 8000bc8:	efffffff 	.word	0xefffffff
 8000bcc:	feffffff 	.word	0xfeffffff
 8000bd0:	ff02ffff 	.word	0xff02ffff

08000bd4 <HAL_RCC_ClockConfig>:
{
 8000bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000bd6:	1e06      	subs	r6, r0, #0
 8000bd8:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8000bda:	d101      	bne.n	8000be0 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8000bdc:	2001      	movs	r0, #1
}
 8000bde:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000be0:	2201      	movs	r2, #1
 8000be2:	4c51      	ldr	r4, [pc, #324]	; (8000d28 <HAL_RCC_ClockConfig+0x154>)
 8000be4:	9901      	ldr	r1, [sp, #4]
 8000be6:	6823      	ldr	r3, [r4, #0]
 8000be8:	4013      	ands	r3, r2
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d327      	bcc.n	8000c3e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000bee:	6832      	ldr	r2, [r6, #0]
 8000bf0:	0793      	lsls	r3, r2, #30
 8000bf2:	d42f      	bmi.n	8000c54 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bf4:	07d3      	lsls	r3, r2, #31
 8000bf6:	d435      	bmi.n	8000c64 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	6822      	ldr	r2, [r4, #0]
 8000bfc:	9901      	ldr	r1, [sp, #4]
 8000bfe:	401a      	ands	r2, r3
 8000c00:	4291      	cmp	r1, r2
 8000c02:	d200      	bcs.n	8000c06 <HAL_RCC_ClockConfig+0x32>
 8000c04:	e081      	b.n	8000d0a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c06:	6832      	ldr	r2, [r6, #0]
 8000c08:	4c48      	ldr	r4, [pc, #288]	; (8000d2c <HAL_RCC_ClockConfig+0x158>)
 8000c0a:	0753      	lsls	r3, r2, #29
 8000c0c:	d500      	bpl.n	8000c10 <HAL_RCC_ClockConfig+0x3c>
 8000c0e:	e084      	b.n	8000d1a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c10:	0713      	lsls	r3, r2, #28
 8000c12:	d506      	bpl.n	8000c22 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000c14:	68e2      	ldr	r2, [r4, #12]
 8000c16:	6933      	ldr	r3, [r6, #16]
 8000c18:	4945      	ldr	r1, [pc, #276]	; (8000d30 <HAL_RCC_ClockConfig+0x15c>)
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c22:	f7ff fd49 	bl	80006b8 <HAL_RCC_GetSysClockFreq>
 8000c26:	68e3      	ldr	r3, [r4, #12]
 8000c28:	4a42      	ldr	r2, [pc, #264]	; (8000d34 <HAL_RCC_ClockConfig+0x160>)
 8000c2a:	061b      	lsls	r3, r3, #24
 8000c2c:	0f1b      	lsrs	r3, r3, #28
 8000c2e:	5cd3      	ldrb	r3, [r2, r3]
 8000c30:	40d8      	lsrs	r0, r3
 8000c32:	4b41      	ldr	r3, [pc, #260]	; (8000d38 <HAL_RCC_ClockConfig+0x164>)
 8000c34:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8000c36:	2003      	movs	r0, #3
 8000c38:	f7ff fc06 	bl	8000448 <HAL_InitTick>
 8000c3c:	e7cf      	b.n	8000bde <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	9901      	ldr	r1, [sp, #4]
 8000c42:	4393      	bics	r3, r2
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c48:	6823      	ldr	r3, [r4, #0]
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	9a01      	ldr	r2, [sp, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d1c4      	bne.n	8000bdc <HAL_RCC_ClockConfig+0x8>
 8000c52:	e7cc      	b.n	8000bee <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c54:	20f0      	movs	r0, #240	; 0xf0
 8000c56:	4935      	ldr	r1, [pc, #212]	; (8000d2c <HAL_RCC_ClockConfig+0x158>)
 8000c58:	68cb      	ldr	r3, [r1, #12]
 8000c5a:	4383      	bics	r3, r0
 8000c5c:	68b0      	ldr	r0, [r6, #8]
 8000c5e:	4303      	orrs	r3, r0
 8000c60:	60cb      	str	r3, [r1, #12]
 8000c62:	e7c7      	b.n	8000bf4 <HAL_RCC_ClockConfig+0x20>
 8000c64:	4d31      	ldr	r5, [pc, #196]	; (8000d2c <HAL_RCC_ClockConfig+0x158>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c66:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c68:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c6a:	2a02      	cmp	r2, #2
 8000c6c:	d119      	bne.n	8000ca2 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000c6e:	039b      	lsls	r3, r3, #14
 8000c70:	d5b4      	bpl.n	8000bdc <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c72:	2103      	movs	r1, #3
 8000c74:	68eb      	ldr	r3, [r5, #12]
 8000c76:	438b      	bics	r3, r1
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8000c7c:	f7ff fc18 	bl	80004b0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c80:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000c82:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d119      	bne.n	8000cbc <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c88:	220c      	movs	r2, #12
 8000c8a:	68eb      	ldr	r3, [r5, #12]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d0b2      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c92:	f7ff fc0d 	bl	80004b0 <HAL_GetTick>
 8000c96:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <HAL_RCC_ClockConfig+0x168>)
 8000c98:	1bc0      	subs	r0, r0, r7
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d9f4      	bls.n	8000c88 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8000c9e:	2003      	movs	r0, #3
 8000ca0:	e79d      	b.n	8000bde <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ca2:	2a03      	cmp	r2, #3
 8000ca4:	d102      	bne.n	8000cac <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000ca6:	019b      	lsls	r3, r3, #6
 8000ca8:	d4e3      	bmi.n	8000c72 <HAL_RCC_ClockConfig+0x9e>
 8000caa:	e797      	b.n	8000bdc <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000cac:	2a01      	cmp	r2, #1
 8000cae:	d102      	bne.n	8000cb6 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000cb0:	075b      	lsls	r3, r3, #29
 8000cb2:	d4de      	bmi.n	8000c72 <HAL_RCC_ClockConfig+0x9e>
 8000cb4:	e792      	b.n	8000bdc <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000cb6:	059b      	lsls	r3, r3, #22
 8000cb8:	d4db      	bmi.n	8000c72 <HAL_RCC_ClockConfig+0x9e>
 8000cba:	e78f      	b.n	8000bdc <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cbc:	2b03      	cmp	r3, #3
 8000cbe:	d10b      	bne.n	8000cd8 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000cc0:	220c      	movs	r2, #12
 8000cc2:	68eb      	ldr	r3, [r5, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d096      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cca:	f7ff fbf1 	bl	80004b0 <HAL_GetTick>
 8000cce:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <HAL_RCC_ClockConfig+0x168>)
 8000cd0:	1bc0      	subs	r0, r0, r7
 8000cd2:	4298      	cmp	r0, r3
 8000cd4:	d9f4      	bls.n	8000cc0 <HAL_RCC_ClockConfig+0xec>
 8000cd6:	e7e2      	b.n	8000c9e <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d010      	beq.n	8000cfe <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000cdc:	220c      	movs	r2, #12
 8000cde:	68eb      	ldr	r3, [r5, #12]
 8000ce0:	4213      	tst	r3, r2
 8000ce2:	d089      	beq.n	8000bf8 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ce4:	f7ff fbe4 	bl	80004b0 <HAL_GetTick>
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_RCC_ClockConfig+0x168>)
 8000cea:	1bc0      	subs	r0, r0, r7
 8000cec:	4298      	cmp	r0, r3
 8000cee:	d9f5      	bls.n	8000cdc <HAL_RCC_ClockConfig+0x108>
 8000cf0:	e7d5      	b.n	8000c9e <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cf2:	f7ff fbdd 	bl	80004b0 <HAL_GetTick>
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_RCC_ClockConfig+0x168>)
 8000cf8:	1bc0      	subs	r0, r0, r7
 8000cfa:	4298      	cmp	r0, r3
 8000cfc:	d8cf      	bhi.n	8000c9e <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	68eb      	ldr	r3, [r5, #12]
 8000d02:	4013      	ands	r3, r2
 8000d04:	2b04      	cmp	r3, #4
 8000d06:	d1f4      	bne.n	8000cf2 <HAL_RCC_ClockConfig+0x11e>
 8000d08:	e776      	b.n	8000bf8 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d0a:	6822      	ldr	r2, [r4, #0]
 8000d0c:	439a      	bics	r2, r3
 8000d0e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d10:	6822      	ldr	r2, [r4, #0]
 8000d12:	421a      	tst	r2, r3
 8000d14:	d000      	beq.n	8000d18 <HAL_RCC_ClockConfig+0x144>
 8000d16:	e761      	b.n	8000bdc <HAL_RCC_ClockConfig+0x8>
 8000d18:	e775      	b.n	8000c06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d1a:	68e3      	ldr	r3, [r4, #12]
 8000d1c:	4908      	ldr	r1, [pc, #32]	; (8000d40 <HAL_RCC_ClockConfig+0x16c>)
 8000d1e:	400b      	ands	r3, r1
 8000d20:	68f1      	ldr	r1, [r6, #12]
 8000d22:	430b      	orrs	r3, r1
 8000d24:	60e3      	str	r3, [r4, #12]
 8000d26:	e773      	b.n	8000c10 <HAL_RCC_ClockConfig+0x3c>
 8000d28:	40022000 	.word	0x40022000
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	ffffc7ff 	.word	0xffffc7ff
 8000d34:	0800211a 	.word	0x0800211a
 8000d38:	20000004 	.word	0x20000004
 8000d3c:	00001388 	.word	0x00001388
 8000d40:	fffff8ff 	.word	0xfffff8ff

08000d44 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000d44:	4b04      	ldr	r3, [pc, #16]	; (8000d58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d46:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	055b      	lsls	r3, r3, #21
 8000d4c:	0f5b      	lsrs	r3, r3, #29
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000d52:	6810      	ldr	r0, [r2, #0]
 8000d54:	40d8      	lsrs	r0, r3
}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	0800212a 	.word	0x0800212a
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	049b      	lsls	r3, r3, #18
 8000d6c:	0f5b      	lsrs	r3, r3, #29
 8000d6e:	5cd3      	ldrb	r3, [r2, r3]
 8000d70:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d72:	6810      	ldr	r0, [r2, #0]
 8000d74:	40d8      	lsrs	r0, r3
}
 8000d76:	4770      	bx	lr
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	0800212a 	.word	0x0800212a
 8000d80:	20000004 	.word	0x20000004

08000d84 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000d84:	6803      	ldr	r3, [r0, #0]
{
 8000d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d88:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8000d8a:	069b      	lsls	r3, r3, #26
 8000d8c:	d538      	bpl.n	8000e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000d90:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d92:	4c4f      	ldr	r4, [pc, #316]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000d94:	055b      	lsls	r3, r3, #21
 8000d96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8000d98:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d9a:	421a      	tst	r2, r3
 8000d9c:	d104      	bne.n	8000da8 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000da0:	4313      	orrs	r3, r2
 8000da2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8000da4:	2301      	movs	r3, #1
 8000da6:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000da8:	2780      	movs	r7, #128	; 0x80
 8000daa:	4e4a      	ldr	r6, [pc, #296]	; (8000ed4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000dac:	007f      	lsls	r7, r7, #1
 8000dae:	6833      	ldr	r3, [r6, #0]
 8000db0:	423b      	tst	r3, r7
 8000db2:	d04c      	beq.n	8000e4e <HAL_RCCEx_PeriphCLKConfig+0xca>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000db4:	22c0      	movs	r2, #192	; 0xc0
 8000db6:	21c0      	movs	r1, #192	; 0xc0
 8000db8:	6820      	ldr	r0, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000dba:	686b      	ldr	r3, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8000dbc:	0392      	lsls	r2, r2, #14
 8000dbe:	4010      	ands	r0, r2
 8000dc0:	0289      	lsls	r1, r1, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8000dc2:	401a      	ands	r2, r3
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	d153      	bne.n	8000e70 <HAL_RCCEx_PeriphCLKConfig+0xec>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8000dc8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8000dca:	400a      	ands	r2, r1

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000dcc:	d159      	bne.n	8000e82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000dce:	6869      	ldr	r1, [r5, #4]
 8000dd0:	23c0      	movs	r3, #192	; 0xc0
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	029b      	lsls	r3, r3, #10
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d107      	bne.n	8000dec <HAL_RCCEx_PeriphCLKConfig+0x68>
 8000ddc:	6823      	ldr	r3, [r4, #0]
 8000dde:	483e      	ldr	r0, [pc, #248]	; (8000ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000de0:	4003      	ands	r3, r0
 8000de2:	20c0      	movs	r0, #192	; 0xc0
 8000de4:	0380      	lsls	r0, r0, #14
 8000de6:	4001      	ands	r1, r0
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6023      	str	r3, [r4, #0]
 8000dec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000dee:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000df0:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000df2:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d103      	bne.n	8000e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000dfa:	4a38      	ldr	r2, [pc, #224]	; (8000edc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8000e00:	682a      	ldr	r2, [r5, #0]
 8000e02:	0793      	lsls	r3, r2, #30
 8000e04:	d506      	bpl.n	8000e14 <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8000e06:	200c      	movs	r0, #12
 8000e08:	4931      	ldr	r1, [pc, #196]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000e0a:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000e0c:	4383      	bics	r3, r0
 8000e0e:	68a8      	ldr	r0, [r5, #8]
 8000e10:	4303      	orrs	r3, r0
 8000e12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8000e14:	0753      	lsls	r3, r2, #29
 8000e16:	d506      	bpl.n	8000e26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8000e18:	492d      	ldr	r1, [pc, #180]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000e1a:	4831      	ldr	r0, [pc, #196]	; (8000ee0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8000e1c:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000e1e:	4003      	ands	r3, r0
 8000e20:	68e8      	ldr	r0, [r5, #12]
 8000e22:	4303      	orrs	r3, r0
 8000e24:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000e26:	0713      	lsls	r3, r2, #28
 8000e28:	d506      	bpl.n	8000e38 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000e2a:	4929      	ldr	r1, [pc, #164]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000e2c:	482d      	ldr	r0, [pc, #180]	; (8000ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8000e2e:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8000e30:	4003      	ands	r3, r0
 8000e32:	6928      	ldr	r0, [r5, #16]
 8000e34:	4303      	orrs	r3, r0
 8000e36:	64cb      	str	r3, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8000e38:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8000e3a:	0613      	lsls	r3, r2, #24
 8000e3c:	d517      	bpl.n	8000e6e <HAL_RCCEx_PeriphCLKConfig+0xea>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8000e3e:	4a24      	ldr	r2, [pc, #144]	; (8000ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8000e40:	4929      	ldr	r1, [pc, #164]	; (8000ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8000e42:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000e44:	400b      	ands	r3, r1
 8000e46:	6969      	ldr	r1, [r5, #20]
 8000e48:	430b      	orrs	r3, r1
 8000e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4c:	e00f      	b.n	8000e6e <HAL_RCCEx_PeriphCLKConfig+0xea>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e4e:	6833      	ldr	r3, [r6, #0]
 8000e50:	433b      	orrs	r3, r7
 8000e52:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e54:	f7ff fb2c 	bl	80004b0 <HAL_GetTick>
 8000e58:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5a:	6833      	ldr	r3, [r6, #0]
 8000e5c:	423b      	tst	r3, r7
 8000e5e:	d1a9      	bne.n	8000db4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e60:	f7ff fb26 	bl	80004b0 <HAL_GetTick>
 8000e64:	9b01      	ldr	r3, [sp, #4]
 8000e66:	1ac0      	subs	r0, r0, r3
 8000e68:	2864      	cmp	r0, #100	; 0x64
 8000e6a:	d9f6      	bls.n	8000e5a <HAL_RCCEx_PeriphCLKConfig+0xd6>
          return HAL_TIMEOUT;
 8000e6c:	2003      	movs	r0, #3
}
 8000e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8000e70:	001a      	movs	r2, r3
 8000e72:	400a      	ands	r2, r1
 8000e74:	428a      	cmp	r2, r1
 8000e76:	d1a7      	bne.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000e78:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8000e7a:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8000e7c:	0392      	lsls	r2, r2, #14
 8000e7e:	d5a3      	bpl.n	8000dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8000e80:	e7f5      	b.n	8000e6e <HAL_RCCEx_PeriphCLKConfig+0xea>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8000e82:	400b      	ands	r3, r1
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d0a2      	beq.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	069b      	lsls	r3, r3, #26
 8000e8c:	d59f      	bpl.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e8e:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000e90:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8000e92:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000e94:	0312      	lsls	r2, r2, #12
 8000e96:	4302      	orrs	r2, r0
 8000e98:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000e9c:	4b13      	ldr	r3, [pc, #76]	; (8000eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000e9e:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8000ea0:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ea2:	4002      	ands	r2, r0
 8000ea4:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8000ea6:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8000ea8:	05cb      	lsls	r3, r1, #23
 8000eaa:	d400      	bmi.n	8000eae <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8000eac:	e78f      	b.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8000eae:	f7ff faff 	bl	80004b0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000eb2:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8000eb4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000eb6:	00bf      	lsls	r7, r7, #2
 8000eb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000eba:	423b      	tst	r3, r7
 8000ebc:	d000      	beq.n	8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8000ebe:	e786      	b.n	8000dce <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ec0:	f7ff faf6 	bl	80004b0 <HAL_GetTick>
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8000ec6:	1b80      	subs	r0, r0, r6
 8000ec8:	4298      	cmp	r0, r3
 8000eca:	d9f5      	bls.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8000ecc:	e7ce      	b.n	8000e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40007000 	.word	0x40007000
 8000ed8:	ffcfffff 	.word	0xffcfffff
 8000edc:	efffffff 	.word	0xefffffff
 8000ee0:	fffff3ff 	.word	0xfffff3ff
 8000ee4:	ffffcfff 	.word	0xffffcfff
 8000ee8:	fff3ffff 	.word	0xfff3ffff
 8000eec:	fffcffff 	.word	0xfffcffff
 8000ef0:	fff7ffff 	.word	0xfff7ffff
 8000ef4:	00001388 	.word	0x00001388

08000ef8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	0004      	movs	r4, r0
  /* Check the SPI handle allocation */
  if (hspi == NULL)
  {
    return HAL_ERROR;
 8000efc:	2001      	movs	r0, #1
  if (hspi == NULL)
 8000efe:	2c00      	cmp	r4, #0
 8000f00:	d033      	beq.n	8000f6a <HAL_SPI_Init+0x72>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f02:	2300      	movs	r3, #0
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f04:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f06:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8000f08:	3551      	adds	r5, #81	; 0x51
 8000f0a:	782b      	ldrb	r3, [r5, #0]
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <HAL_SPI_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8000f12:	0022      	movs	r2, r4
 8000f14:	3250      	adds	r2, #80	; 0x50
 8000f16:	7013      	strb	r3, [r2, #0]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8000f18:	0020      	movs	r0, r4
 8000f1a:	f000 ffc3 	bl	8001ea4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8000f1e:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8000f20:	2240      	movs	r2, #64	; 0x40
 8000f22:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8000f24:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8000f26:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f28:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8000f2a:	4393      	bics	r3, r2
 8000f2c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8000f2e:	6863      	ldr	r3, [r4, #4]
 8000f30:	69a2      	ldr	r2, [r4, #24]
 8000f32:	4303      	orrs	r3, r0
 8000f34:	68e0      	ldr	r0, [r4, #12]
 8000f36:	4303      	orrs	r3, r0
 8000f38:	6920      	ldr	r0, [r4, #16]
 8000f3a:	4303      	orrs	r3, r0
 8000f3c:	6960      	ldr	r0, [r4, #20]
 8000f3e:	4303      	orrs	r3, r0
 8000f40:	69e0      	ldr	r0, [r4, #28]
 8000f42:	4303      	orrs	r3, r0
 8000f44:	6a20      	ldr	r0, [r4, #32]
 8000f46:	4303      	orrs	r3, r0
 8000f48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000f4a:	4303      	orrs	r3, r0
 8000f4c:	2080      	movs	r0, #128	; 0x80
 8000f4e:	0080      	lsls	r0, r0, #2
 8000f50:	4010      	ands	r0, r2
 8000f52:	4303      	orrs	r3, r0
 8000f54:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f56:	2304      	movs	r3, #4
 8000f58:	0c12      	lsrs	r2, r2, #16
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f5e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f60:	431a      	orrs	r2, r3
  hspi->State     = HAL_SPI_STATE_READY;
 8000f62:	2301      	movs	r3, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8000f64:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000f66:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8000f68:	702b      	strb	r3, [r5, #0]

  return HAL_OK;
}
 8000f6a:	bd70      	pop	{r4, r5, r6, pc}

08000f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6e:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f70:	6925      	ldr	r5, [r4, #16]
 8000f72:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8000f74:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f76:	432a      	orrs	r2, r5
 8000f78:	6965      	ldr	r5, [r4, #20]
 8000f7a:	69c1      	ldr	r1, [r0, #28]
 8000f7c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	4d75      	ldr	r5, [pc, #468]	; (8001158 <UART_SetConfig+0x1ec>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f82:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f84:	4028      	ands	r0, r5
 8000f86:	4302      	orrs	r2, r0
 8000f88:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4873      	ldr	r0, [pc, #460]	; (800115c <UART_SetConfig+0x1f0>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8000f8e:	4d74      	ldr	r5, [pc, #464]	; (8001160 <UART_SetConfig+0x1f4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f90:	4002      	ands	r2, r0
 8000f92:	68e0      	ldr	r0, [r4, #12]
 8000f94:	4302      	orrs	r2, r0
 8000f96:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000f98:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8000f9a:	42ab      	cmp	r3, r5
 8000f9c:	d001      	beq.n	8000fa2 <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8000f9e:	6a22      	ldr	r2, [r4, #32]
 8000fa0:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	4e6f      	ldr	r6, [pc, #444]	; (8001164 <UART_SetConfig+0x1f8>)
 8000fa6:	4032      	ands	r2, r6
 8000fa8:	4302      	orrs	r2, r0
 8000faa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fac:	4a6e      	ldr	r2, [pc, #440]	; (8001168 <UART_SetConfig+0x1fc>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d113      	bne.n	8000fda <UART_SetConfig+0x6e>
 8000fb2:	200c      	movs	r0, #12
 8000fb4:	4b6d      	ldr	r3, [pc, #436]	; (800116c <UART_SetConfig+0x200>)
 8000fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fb8:	4002      	ands	r2, r0
 8000fba:	486d      	ldr	r0, [pc, #436]	; (8001170 <UART_SetConfig+0x204>)
 8000fbc:	5c80      	ldrb	r0, [r0, r2]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	0212      	lsls	r2, r2, #8
 8000fc2:	4291      	cmp	r1, r2
 8000fc4:	d000      	beq.n	8000fc8 <UART_SetConfig+0x5c>
 8000fc6:	e089      	b.n	80010dc <UART_SetConfig+0x170>
  {
    switch (clocksource)
 8000fc8:	2808      	cmp	r0, #8
 8000fca:	d815      	bhi.n	8000ff8 <UART_SetConfig+0x8c>
 8000fcc:	f7ff f89c 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000fd0:	145a574f 	.word	0x145a574f
 8000fd4:	1414147b 	.word	0x1414147b
 8000fd8:	7e          	.byte	0x7e
 8000fd9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fda:	42ab      	cmp	r3, r5
 8000fdc:	d000      	beq.n	8000fe0 <UART_SetConfig+0x74>
 8000fde:	e0b3      	b.n	8001148 <UART_SetConfig+0x1dc>
 8000fe0:	21c0      	movs	r1, #192	; 0xc0
 8000fe2:	2080      	movs	r0, #128	; 0x80
 8000fe4:	4a61      	ldr	r2, [pc, #388]	; (800116c <UART_SetConfig+0x200>)
 8000fe6:	0109      	lsls	r1, r1, #4
 8000fe8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000fea:	00c0      	lsls	r0, r0, #3
 8000fec:	400b      	ands	r3, r1
 8000fee:	4283      	cmp	r3, r0
 8000ff0:	d038      	beq.n	8001064 <UART_SetConfig+0xf8>
 8000ff2:	d803      	bhi.n	8000ffc <UART_SetConfig+0x90>
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d00a      	beq.n	800100e <UART_SetConfig+0xa2>
        ret = HAL_ERROR;
 8000ff8:	2501      	movs	r5, #1
 8000ffa:	e00d      	b.n	8001018 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000ffc:	2080      	movs	r0, #128	; 0x80
 8000ffe:	0100      	lsls	r0, r0, #4
 8001000:	4283      	cmp	r3, r0
 8001002:	d00e      	beq.n	8001022 <UART_SetConfig+0xb6>
 8001004:	428b      	cmp	r3, r1
 8001006:	d1f7      	bne.n	8000ff8 <UART_SetConfig+0x8c>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	0200      	lsls	r0, r0, #8
 800100c:	e00d      	b.n	800102a <UART_SetConfig+0xbe>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800100e:	f7ff fe99 	bl	8000d44 <HAL_RCC_GetPCLK1Freq>
 8001012:	2500      	movs	r5, #0
    if (lpuart_ker_ck_pres != 0U)
 8001014:	42a8      	cmp	r0, r5
 8001016:	d108      	bne.n	800102a <UART_SetConfig+0xbe>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001018:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 800101a:	0028      	movs	r0, r5
  huart->RxISR = NULL;
 800101c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800101e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	06db      	lsls	r3, r3, #27
 8001026:	d520      	bpl.n	800106a <UART_SetConfig+0xfe>
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8001028:	4852      	ldr	r0, [pc, #328]	; (8001174 <UART_SetConfig+0x208>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800102a:	2203      	movs	r2, #3
 800102c:	6863      	ldr	r3, [r4, #4]
 800102e:	435a      	muls	r2, r3
 8001030:	4282      	cmp	r2, r0
 8001032:	d8e1      	bhi.n	8000ff8 <UART_SetConfig+0x8c>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8001034:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8001036:	4282      	cmp	r2, r0
 8001038:	d3de      	bcc.n	8000ff8 <UART_SetConfig+0x8c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800103a:	2700      	movs	r7, #0
 800103c:	0e02      	lsrs	r2, r0, #24
 800103e:	0201      	lsls	r1, r0, #8
 8001040:	085e      	lsrs	r6, r3, #1
 8001042:	1989      	adds	r1, r1, r6
 8001044:	417a      	adcs	r2, r7
 8001046:	0008      	movs	r0, r1
 8001048:	0011      	movs	r1, r2
 800104a:	001a      	movs	r2, r3
 800104c:	003b      	movs	r3, r7
 800104e:	f7ff f8f1 	bl	8000234 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8001052:	4b49      	ldr	r3, [pc, #292]	; (8001178 <UART_SetConfig+0x20c>)
 8001054:	18c2      	adds	r2, r0, r3
 8001056:	4b49      	ldr	r3, [pc, #292]	; (800117c <UART_SetConfig+0x210>)
 8001058:	429a      	cmp	r2, r3
 800105a:	d8cd      	bhi.n	8000ff8 <UART_SetConfig+0x8c>
          huart->Instance->BRR = usartdiv;
 800105c:	6823      	ldr	r3, [r4, #0]
 800105e:	003d      	movs	r5, r7
 8001060:	60d8      	str	r0, [r3, #12]
 8001062:	e7d9      	b.n	8001018 <UART_SetConfig+0xac>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8001064:	f7ff fb28 	bl	80006b8 <HAL_RCC_GetSysClockFreq>
        break;
 8001068:	e7d3      	b.n	8001012 <UART_SetConfig+0xa6>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800106a:	4845      	ldr	r0, [pc, #276]	; (8001180 <UART_SetConfig+0x214>)
 800106c:	e7dd      	b.n	800102a <UART_SetConfig+0xbe>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800106e:	f7ff fe69 	bl	8000d44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001072:	6863      	ldr	r3, [r4, #4]
 8001074:	0040      	lsls	r0, r0, #1
 8001076:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001078:	18c0      	adds	r0, r0, r3
 800107a:	6861      	ldr	r1, [r4, #4]
 800107c:	e00b      	b.n	8001096 <UART_SetConfig+0x12a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800107e:	f7ff fe71 	bl	8000d64 <HAL_RCC_GetPCLK2Freq>
 8001082:	e7f6      	b.n	8001072 <UART_SetConfig+0x106>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001084:	2510      	movs	r5, #16
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	6861      	ldr	r1, [r4, #4]
 800108a:	4015      	ands	r5, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800108c:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800108e:	2d00      	cmp	r5, #0
 8001090:	d006      	beq.n	80010a0 <UART_SetConfig+0x134>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001092:	4b3c      	ldr	r3, [pc, #240]	; (8001184 <UART_SetConfig+0x218>)
 8001094:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001096:	f7ff f841 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 800109a:	2500      	movs	r5, #0
 800109c:	b283      	uxth	r3, r0
        break;
 800109e:	e004      	b.n	80010aa <UART_SetConfig+0x13e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80010a0:	4b39      	ldr	r3, [pc, #228]	; (8001188 <UART_SetConfig+0x21c>)
 80010a2:	18c0      	adds	r0, r0, r3
 80010a4:	f7ff f83a 	bl	800011c <__udivsi3>
 80010a8:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80010aa:	0019      	movs	r1, r3
 80010ac:	4837      	ldr	r0, [pc, #220]	; (800118c <UART_SetConfig+0x220>)
 80010ae:	3910      	subs	r1, #16
 80010b0:	4281      	cmp	r1, r0
 80010b2:	d8a1      	bhi.n	8000ff8 <UART_SetConfig+0x8c>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80010b4:	210f      	movs	r1, #15
 80010b6:	0018      	movs	r0, r3
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80010b8:	071b      	lsls	r3, r3, #28
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80010ba:	4388      	bics	r0, r1
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80010bc:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 80010be:	6821      	ldr	r1, [r4, #0]
 80010c0:	4303      	orrs	r3, r0
      huart->Instance->BRR = usartdiv;
 80010c2:	60cb      	str	r3, [r1, #12]
 80010c4:	e7a8      	b.n	8001018 <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010c6:	f7ff faf7 	bl	80006b8 <HAL_RCC_GetSysClockFreq>
 80010ca:	e7d2      	b.n	8001072 <UART_SetConfig+0x106>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010cc:	6863      	ldr	r3, [r4, #4]
 80010ce:	0858      	lsrs	r0, r3, #1
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	025b      	lsls	r3, r3, #9
 80010d4:	e7d0      	b.n	8001078 <UART_SetConfig+0x10c>
        ret = HAL_ERROR;
 80010d6:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 80010d8:	2300      	movs	r3, #0
 80010da:	e7e6      	b.n	80010aa <UART_SetConfig+0x13e>
    switch (clocksource)
 80010dc:	2808      	cmp	r0, #8
 80010de:	d837      	bhi.n	8001150 <UART_SetConfig+0x1e4>
 80010e0:	f7ff f812 	bl	8000108 <__gnu_thumb1_case_uqi>
 80010e4:	360f0c05 	.word	0x360f0c05
 80010e8:	3636362a 	.word	0x3636362a
 80010ec:	2d          	.byte	0x2d
 80010ed:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80010ee:	f7ff fe29 	bl	8000d44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010f2:	6863      	ldr	r3, [r4, #4]
 80010f4:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010f6:	18c0      	adds	r0, r0, r3
 80010f8:	6861      	ldr	r1, [r4, #4]
 80010fa:	e00b      	b.n	8001114 <UART_SetConfig+0x1a8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80010fc:	f7ff fe32 	bl	8000d64 <HAL_RCC_GetPCLK2Freq>
 8001100:	e7f7      	b.n	80010f2 <UART_SetConfig+0x186>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001102:	2510      	movs	r5, #16
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	6861      	ldr	r1, [r4, #4]
 8001108:	4015      	ands	r5, r2
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800110a:	0848      	lsrs	r0, r1, #1
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800110c:	2d00      	cmp	r5, #0
 800110e:	d00d      	beq.n	800112c <UART_SetConfig+0x1c0>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <UART_SetConfig+0x208>)
 8001112:	18c0      	adds	r0, r0, r3
 8001114:	f7ff f802 	bl	800011c <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8001118:	2500      	movs	r5, #0
 800111a:	b283      	uxth	r3, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800111c:	0019      	movs	r1, r3
 800111e:	481b      	ldr	r0, [pc, #108]	; (800118c <UART_SetConfig+0x220>)
 8001120:	3910      	subs	r1, #16
 8001122:	4281      	cmp	r1, r0
 8001124:	d900      	bls.n	8001128 <UART_SetConfig+0x1bc>
 8001126:	e767      	b.n	8000ff8 <UART_SetConfig+0x8c>
      huart->Instance->BRR = usartdiv;
 8001128:	6821      	ldr	r1, [r4, #0]
 800112a:	e7ca      	b.n	80010c2 <UART_SetConfig+0x156>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <UART_SetConfig+0x214>)
 800112e:	18c0      	adds	r0, r0, r3
 8001130:	f7fe fff4 	bl	800011c <__udivsi3>
 8001134:	b283      	uxth	r3, r0
 8001136:	e7f1      	b.n	800111c <UART_SetConfig+0x1b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001138:	f7ff fabe 	bl	80006b8 <HAL_RCC_GetSysClockFreq>
 800113c:	e7d9      	b.n	80010f2 <UART_SetConfig+0x186>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800113e:	6863      	ldr	r3, [r4, #4]
 8001140:	0858      	lsrs	r0, r3, #1
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	e7d6      	b.n	80010f6 <UART_SetConfig+0x18a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	4299      	cmp	r1, r3
 800114e:	d0c2      	beq.n	80010d6 <UART_SetConfig+0x16a>
        ret = HAL_ERROR;
 8001150:	2501      	movs	r5, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001152:	2300      	movs	r3, #0
 8001154:	e7e2      	b.n	800111c <UART_SetConfig+0x1b0>
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	efff69f3 	.word	0xefff69f3
 800115c:	ffffcfff 	.word	0xffffcfff
 8001160:	40004800 	.word	0x40004800
 8001164:	fffff4ff 	.word	0xfffff4ff
 8001168:	40004400 	.word	0x40004400
 800116c:	40021000 	.word	0x40021000
 8001170:	080020fc 	.word	0x080020fc
 8001174:	003d0900 	.word	0x003d0900
 8001178:	fffffd00 	.word	0xfffffd00
 800117c:	000ffcff 	.word	0x000ffcff
 8001180:	00f42400 	.word	0x00f42400
 8001184:	007a1200 	.word	0x007a1200
 8001188:	01e84800 	.word	0x01e84800
 800118c:	0000ffef 	.word	0x0000ffef

08001190 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001190:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001192:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001194:	07da      	lsls	r2, r3, #31
 8001196:	d506      	bpl.n	80011a6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001198:	6801      	ldr	r1, [r0, #0]
 800119a:	4c28      	ldr	r4, [pc, #160]	; (800123c <UART_AdvFeatureConfig+0xac>)
 800119c:	684a      	ldr	r2, [r1, #4]
 800119e:	4022      	ands	r2, r4
 80011a0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80011a2:	4322      	orrs	r2, r4
 80011a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80011a6:	079a      	lsls	r2, r3, #30
 80011a8:	d506      	bpl.n	80011b8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80011aa:	6801      	ldr	r1, [r0, #0]
 80011ac:	4c24      	ldr	r4, [pc, #144]	; (8001240 <UART_AdvFeatureConfig+0xb0>)
 80011ae:	684a      	ldr	r2, [r1, #4]
 80011b0:	4022      	ands	r2, r4
 80011b2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80011b4:	4322      	orrs	r2, r4
 80011b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80011b8:	075a      	lsls	r2, r3, #29
 80011ba:	d506      	bpl.n	80011ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80011bc:	6801      	ldr	r1, [r0, #0]
 80011be:	4c21      	ldr	r4, [pc, #132]	; (8001244 <UART_AdvFeatureConfig+0xb4>)
 80011c0:	684a      	ldr	r2, [r1, #4]
 80011c2:	4022      	ands	r2, r4
 80011c4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80011c6:	4322      	orrs	r2, r4
 80011c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80011ca:	071a      	lsls	r2, r3, #28
 80011cc:	d506      	bpl.n	80011dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80011ce:	6801      	ldr	r1, [r0, #0]
 80011d0:	4c1d      	ldr	r4, [pc, #116]	; (8001248 <UART_AdvFeatureConfig+0xb8>)
 80011d2:	684a      	ldr	r2, [r1, #4]
 80011d4:	4022      	ands	r2, r4
 80011d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80011d8:	4322      	orrs	r2, r4
 80011da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80011dc:	06da      	lsls	r2, r3, #27
 80011de:	d506      	bpl.n	80011ee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80011e0:	6801      	ldr	r1, [r0, #0]
 80011e2:	4c1a      	ldr	r4, [pc, #104]	; (800124c <UART_AdvFeatureConfig+0xbc>)
 80011e4:	688a      	ldr	r2, [r1, #8]
 80011e6:	4022      	ands	r2, r4
 80011e8:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80011ea:	4322      	orrs	r2, r4
 80011ec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80011ee:	069a      	lsls	r2, r3, #26
 80011f0:	d506      	bpl.n	8001200 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80011f2:	6801      	ldr	r1, [r0, #0]
 80011f4:	4c16      	ldr	r4, [pc, #88]	; (8001250 <UART_AdvFeatureConfig+0xc0>)
 80011f6:	688a      	ldr	r2, [r1, #8]
 80011f8:	4022      	ands	r2, r4
 80011fa:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80011fc:	4322      	orrs	r2, r4
 80011fe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001200:	065a      	lsls	r2, r3, #25
 8001202:	d510      	bpl.n	8001226 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001204:	6801      	ldr	r1, [r0, #0]
 8001206:	4d13      	ldr	r5, [pc, #76]	; (8001254 <UART_AdvFeatureConfig+0xc4>)
 8001208:	684a      	ldr	r2, [r1, #4]
 800120a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800120c:	402a      	ands	r2, r5
 800120e:	4322      	orrs	r2, r4
 8001210:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001212:	2280      	movs	r2, #128	; 0x80
 8001214:	0352      	lsls	r2, r2, #13
 8001216:	4294      	cmp	r4, r2
 8001218:	d105      	bne.n	8001226 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800121a:	684a      	ldr	r2, [r1, #4]
 800121c:	4c0e      	ldr	r4, [pc, #56]	; (8001258 <UART_AdvFeatureConfig+0xc8>)
 800121e:	4022      	ands	r2, r4
 8001220:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001222:	4322      	orrs	r2, r4
 8001224:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001226:	061b      	lsls	r3, r3, #24
 8001228:	d506      	bpl.n	8001238 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800122a:	6802      	ldr	r2, [r0, #0]
 800122c:	490b      	ldr	r1, [pc, #44]	; (800125c <UART_AdvFeatureConfig+0xcc>)
 800122e:	6853      	ldr	r3, [r2, #4]
 8001230:	400b      	ands	r3, r1
 8001232:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001234:	430b      	orrs	r3, r1
 8001236:	6053      	str	r3, [r2, #4]
  }
}
 8001238:	bd30      	pop	{r4, r5, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	fffdffff 	.word	0xfffdffff
 8001240:	fffeffff 	.word	0xfffeffff
 8001244:	fffbffff 	.word	0xfffbffff
 8001248:	ffff7fff 	.word	0xffff7fff
 800124c:	ffffefff 	.word	0xffffefff
 8001250:	ffffdfff 	.word	0xffffdfff
 8001254:	ffefffff 	.word	0xffefffff
 8001258:	ff9fffff 	.word	0xff9fffff
 800125c:	fff7ffff 	.word	0xfff7ffff

08001260 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001262:	0004      	movs	r4, r0
 8001264:	000e      	movs	r6, r1
 8001266:	0015      	movs	r5, r2
 8001268:	001f      	movs	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800126a:	6822      	ldr	r2, [r4, #0]
 800126c:	69d3      	ldr	r3, [r2, #28]
 800126e:	4033      	ands	r3, r6
 8001270:	1b9b      	subs	r3, r3, r6
 8001272:	4259      	negs	r1, r3
 8001274:	414b      	adcs	r3, r1
 8001276:	42ab      	cmp	r3, r5
 8001278:	d001      	beq.n	800127e <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800127a:	2000      	movs	r0, #0
 800127c:	e01b      	b.n	80012b6 <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800127e:	9b06      	ldr	r3, [sp, #24]
 8001280:	3301      	adds	r3, #1
 8001282:	d0f3      	beq.n	800126c <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001284:	f7ff f914 	bl	80004b0 <HAL_GetTick>
 8001288:	9b06      	ldr	r3, [sp, #24]
 800128a:	1bc0      	subs	r0, r0, r7
 800128c:	4283      	cmp	r3, r0
 800128e:	d301      	bcc.n	8001294 <UART_WaitOnFlagUntilTimeout+0x34>
 8001290:	2b00      	cmp	r3, #0
 8001292:	d1ea      	bne.n	800126a <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <UART_WaitOnFlagUntilTimeout+0x58>)
 8001298:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 800129a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800129c:	400a      	ands	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012a0:	689a      	ldr	r2, [r3, #8]
 80012a2:	31a3      	adds	r1, #163	; 0xa3
 80012a4:	31ff      	adds	r1, #255	; 0xff
 80012a6:	438a      	bics	r2, r1
 80012a8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80012aa:	2320      	movs	r3, #32
 80012ac:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80012ae:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80012b0:	2300      	movs	r3, #0
 80012b2:	3470      	adds	r4, #112	; 0x70
 80012b4:	7023      	strb	r3, [r4, #0]
}
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012b8:	fffffe5f 	.word	0xfffffe5f

080012bc <UART_CheckIdleState>:
{
 80012bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012be:	2600      	movs	r6, #0
{
 80012c0:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012c2:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80012c4:	f7ff f8f4 	bl	80004b0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012c8:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80012ca:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	071b      	lsls	r3, r3, #28
 80012d0:	d415      	bmi.n	80012fe <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	075b      	lsls	r3, r3, #29
 80012d8:	d50a      	bpl.n	80012f0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012da:	2180      	movs	r1, #128	; 0x80
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <UART_CheckIdleState+0x5c>)
 80012de:	2200      	movs	r2, #0
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	03c9      	lsls	r1, r1, #15
 80012e4:	002b      	movs	r3, r5
 80012e6:	0020      	movs	r0, r4
 80012e8:	f7ff ffba 	bl	8001260 <UART_WaitOnFlagUntilTimeout>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	d111      	bne.n	8001314 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80012f0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80012f2:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80012f4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80012f6:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80012f8:	3470      	adds	r4, #112	; 0x70
 80012fa:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80012fc:	e00b      	b.n	8001316 <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <UART_CheckIdleState+0x5c>)
 8001302:	0032      	movs	r2, r6
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	0389      	lsls	r1, r1, #14
 8001308:	0003      	movs	r3, r0
 800130a:	0020      	movs	r0, r4
 800130c:	f7ff ffa8 	bl	8001260 <UART_WaitOnFlagUntilTimeout>
 8001310:	2800      	cmp	r0, #0
 8001312:	d0de      	beq.n	80012d2 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001314:	2003      	movs	r0, #3
}
 8001316:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8001318:	01ffffff 	.word	0x01ffffff

0800131c <HAL_UART_Init>:
{
 800131c:	b510      	push	{r4, lr}
 800131e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001320:	d101      	bne.n	8001326 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001322:	2001      	movs	r0, #1
}
 8001324:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8001326:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001328:	2b00      	cmp	r3, #0
 800132a:	d104      	bne.n	8001336 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800132c:	0002      	movs	r2, r0
 800132e:	3270      	adds	r2, #112	; 0x70
 8001330:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001332:	f000 fe49 	bl	8001fc8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001336:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001338:	2101      	movs	r1, #1
 800133a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800133c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800133e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001340:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001342:	438b      	bics	r3, r1
 8001344:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001346:	f7ff fe11 	bl	8000f6c <UART_SetConfig>
 800134a:	2801      	cmp	r0, #1
 800134c:	d0e9      	beq.n	8001322 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800134e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8001354:	0020      	movs	r0, r4
 8001356:	f7ff ff1b 	bl	8001190 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <HAL_UART_Init+0x60>)
 800135e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8001360:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001362:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001364:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	438a      	bics	r2, r1
 800136c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800136e:	2201      	movs	r2, #1
 8001370:	6819      	ldr	r1, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8001376:	f7ff ffa1 	bl	80012bc <UART_CheckIdleState>
 800137a:	e7d3      	b.n	8001324 <HAL_UART_Init+0x8>
 800137c:	ffffb7ff 	.word	0xffffb7ff

08001380 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001380:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 8001382:	f000 fb4f 	bl	8001a24 <vTaskStartScheduler>
  
  return osOK;
}
 8001386:	2000      	movs	r0, #0
 8001388:	bd10      	pop	{r4, pc}

0800138a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800138a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800138c:	000b      	movs	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800138e:	6846      	ldr	r6, [r0, #4]
 8001390:	6801      	ldr	r1, [r0, #0]
 8001392:	8a02      	ldrh	r2, [r0, #16]
 8001394:	2508      	movs	r5, #8
 8001396:	5f45      	ldrsh	r5, [r0, r5]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001398:	2400      	movs	r4, #0
  if (priority != osPriorityError) {
 800139a:	2d84      	cmp	r5, #132	; 0x84
 800139c:	d000      	beq.n	80013a0 <osThreadCreate+0x16>
    fpriority += (priority - osPriorityIdle);
 800139e:	1cec      	adds	r4, r5, #3
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013a0:	a803      	add	r0, sp, #12
 80013a2:	9001      	str	r0, [sp, #4]
 80013a4:	9400      	str	r4, [sp, #0]
 80013a6:	0030      	movs	r0, r6
 80013a8:	f000 fa78 	bl	800189c <xTaskCreate>
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 80013ac:	2300      	movs	r3, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80013ae:	2801      	cmp	r0, #1
 80013b0:	d100      	bne.n	80013b4 <osThreadCreate+0x2a>
  }     
#endif
  
  return handle;
 80013b2:	9b03      	ldr	r3, [sp, #12]
}
 80013b4:	0018      	movs	r0, r3
 80013b6:	b004      	add	sp, #16
 80013b8:	bd70      	pop	{r4, r5, r6, pc}

080013ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80013ba:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80013bc:	2800      	cmp	r0, #0
 80013be:	d100      	bne.n	80013c2 <osDelay+0x8>
 80013c0:	3001      	adds	r0, #1
 80013c2:	f000 fc47 	bl	8001c54 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80013c6:	2000      	movs	r0, #0
 80013c8:	bd10      	pop	{r4, pc}

080013ca <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80013ca:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013cc:	f000 fc92 	bl	8001cf4 <xTaskGetSchedulerState>
 80013d0:	2801      	cmp	r0, #1
 80013d2:	d001      	beq.n	80013d8 <osSystickHandler+0xe>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80013d4:	f000 f90e 	bl	80015f4 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80013d8:	bd10      	pop	{r4, pc}

080013da <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013da:	0003      	movs	r3, r0

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013dc:	2201      	movs	r2, #1
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013de:	3308      	adds	r3, #8
 80013e0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013e2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80013e4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013e6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80013e8:	4252      	negs	r2, r2
 80013ea:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80013ec:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80013ee:	4770      	bx	lr

080013f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80013f4:	4770      	bx	lr

080013f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80013f6:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013f8:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80013fa:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80013fc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001402:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001404:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001406:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001408:	3301      	adds	r3, #1
 800140a:	6003      	str	r3, [r0, #0]
}
 800140c:	4770      	bx	lr

0800140e <vListInsert>:
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800140e:	0003      	movs	r3, r0
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001410:	680a      	ldr	r2, [r1, #0]
{
 8001412:	b530      	push	{r4, r5, lr}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001414:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 8001416:	1c54      	adds	r4, r2, #1
 8001418:	d10b      	bne.n	8001432 <vListInsert+0x24>
		pxIterator = pxList->xListEnd.pxPrevious;
 800141a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001420:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001422:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001424:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001426:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001428:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800142a:	3301      	adds	r3, #1
 800142c:	6003      	str	r3, [r0, #0]
}
 800142e:	bd30      	pop	{r4, r5, pc}
 8001430:	0023      	movs	r3, r4
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001432:	685c      	ldr	r4, [r3, #4]
 8001434:	6825      	ldr	r5, [r4, #0]
 8001436:	42aa      	cmp	r2, r5
 8001438:	d2fa      	bcs.n	8001430 <vListInsert+0x22>
 800143a:	e7ef      	b.n	800141c <vListInsert+0xe>

0800143c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800143c:	6841      	ldr	r1, [r0, #4]
 800143e:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001440:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001442:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001444:	6882      	ldr	r2, [r0, #8]
 8001446:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001448:	6859      	ldr	r1, [r3, #4]
 800144a:	4288      	cmp	r0, r1
 800144c:	d100      	bne.n	8001450 <uxListRemove+0x14>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800144e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001450:	2200      	movs	r2, #0
 8001452:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	3a01      	subs	r2, #1
 8001458:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800145a:	6818      	ldr	r0, [r3, #0]
}
 800145c:	4770      	bx	lr
	...

08001460 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8001460:	2300      	movs	r3, #0
{
 8001462:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8001464:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <prvTaskExitError+0x20>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	d001      	beq.n	8001472 <prvTaskExitError+0x12>
 800146e:	b672      	cpsid	i
 8001470:	e7fe      	b.n	8001470 <prvTaskExitError+0x10>
	portDISABLE_INTERRUPTS();
 8001472:	b672      	cpsid	i
	while( ulDummy == 0 )
 8001474:	9b01      	ldr	r3, [sp, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d0fc      	beq.n	8001474 <prvTaskExitError+0x14>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800147a:	b002      	add	sp, #8
 800147c:	4770      	bx	lr
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	20000000 	.word	0x20000000
	...

08001490 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8001490:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <pxCurrentTCBConst2>)
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	3020      	adds	r0, #32
 8001498:	f380 8809 	msr	PSP, r0
 800149c:	2002      	movs	r0, #2
 800149e:	f380 8814 	msr	CONTROL, r0
 80014a2:	f3bf 8f6f 	isb	sy
 80014a6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80014a8:	46ae      	mov	lr, r5
 80014aa:	bc08      	pop	{r3}
 80014ac:	bc04      	pop	{r2}
 80014ae:	b662      	cpsie	i
 80014b0:	4718      	bx	r3
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	46c0      	nop			; (mov r8, r8)
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46c0      	nop			; (mov r8, r8)

080014c0 <pxCurrentTCBConst2>:
 80014c0:	20000c3c 	.word	0x20000c3c

080014c4 <pxPortInitialiseStack>:
{
 80014c4:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80014c6:	2480      	movs	r4, #128	; 0x80
 80014c8:	1f03      	subs	r3, r0, #4
 80014ca:	0464      	lsls	r4, r4, #17
 80014cc:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80014ce:	3b04      	subs	r3, #4
 80014d0:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80014d2:	4903      	ldr	r1, [pc, #12]	; (80014e0 <pxPortInitialiseStack+0x1c>)
 80014d4:	3b04      	subs	r3, #4
 80014d6:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014d8:	3b14      	subs	r3, #20
	pxTopOfStack -= 8; /* R11..R4. */
 80014da:	3840      	subs	r0, #64	; 0x40
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80014dc:	601a      	str	r2, [r3, #0]
}
 80014de:	bd10      	pop	{r4, pc}
 80014e0:	08001461 	.word	0x08001461

080014e4 <SVC_Handler>:
}
 80014e4:	4770      	bx	lr
	...

080014e8 <xPortStartScheduler>:
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <xPortStartScheduler+0x4c>)
 80014ec:	0412      	lsls	r2, r2, #16
 80014ee:	6819      	ldr	r1, [r3, #0]
{
 80014f0:	b570      	push	{r4, r5, r6, lr}
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80014f6:	22ff      	movs	r2, #255	; 0xff
 80014f8:	6819      	ldr	r1, [r3, #0]
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 80014fa:	2400      	movs	r4, #0
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80014fc:	0612      	lsls	r2, r2, #24
 80014fe:	430a      	orrs	r2, r1
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001500:	21fa      	movs	r1, #250	; 0xfa
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8001502:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL = 0UL;
 8001504:	4d0c      	ldr	r5, [pc, #48]	; (8001538 <xPortStartScheduler+0x50>)
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <xPortStartScheduler+0x54>)
	portNVIC_SYSTICK_CTRL = 0UL;
 8001508:	602c      	str	r4, [r5, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 800150a:	601c      	str	r4, [r3, #0]
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <xPortStartScheduler+0x58>)
 800150e:	0089      	lsls	r1, r1, #2
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	f7fe fe03 	bl	800011c <__udivsi3>
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <xPortStartScheduler+0x5c>)
 8001518:	3801      	subs	r0, #1
 800151a:	6018      	str	r0, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 800151c:	2307      	movs	r3, #7
 800151e:	602b      	str	r3, [r5, #0]
	uxCriticalNesting = 0;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <xPortStartScheduler+0x60>)
 8001522:	601c      	str	r4, [r3, #0]
	vPortStartFirstTask();
 8001524:	f7ff ffb4 	bl	8001490 <vPortStartFirstTask>
	vTaskSwitchContext();
 8001528:	f000 fbae 	bl	8001c88 <vTaskSwitchContext>
	prvTaskExitError();
 800152c:	f7ff ff98 	bl	8001460 <prvTaskExitError>
}
 8001530:	0020      	movs	r0, r4
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	e000ed20 	.word	0xe000ed20
 8001538:	e000e010 	.word	0xe000e010
 800153c:	e000e018 	.word	0xe000e018
 8001540:	20000004 	.word	0x20000004
 8001544:	e000e014 	.word	0xe000e014
 8001548:	20000000 	.word	0x20000000

0800154c <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <vPortYield+0x14>)
 8001550:	0552      	lsls	r2, r2, #21
 8001552:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8001554:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001558:	f3bf 8f6f 	isb	sy
}
 800155c:	4770      	bx	lr
 800155e:	46c0      	nop			; (mov r8, r8)
 8001560:	e000ed04 	.word	0xe000ed04

08001564 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8001564:	b672      	cpsid	i
    uxCriticalNesting++;
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <vPortEnterCritical+0x14>)
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" ::: "memory" );
 800156e:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001572:	f3bf 8f6f 	isb	sy
}
 8001576:	4770      	bx	lr
 8001578:	20000000 	.word	0x20000000

0800157c <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800157c:	4a05      	ldr	r2, [pc, #20]	; (8001594 <vPortExitCritical+0x18>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <vPortExitCritical+0xc>
 8001584:	b672      	cpsid	i
 8001586:	e7fe      	b.n	8001586 <vPortExitCritical+0xa>
    uxCriticalNesting--;
 8001588:	3b01      	subs	r3, #1
 800158a:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 800158c:	2b00      	cmp	r3, #0
 800158e:	d100      	bne.n	8001592 <vPortExitCritical+0x16>
        portENABLE_INTERRUPTS();
 8001590:	b662      	cpsie	i
}
 8001592:	4770      	bx	lr
 8001594:	20000000 	.word	0x20000000

08001598 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8001598:	f3ef 8010 	mrs	r0, PRIMASK
 800159c:	b672      	cpsid	i
 800159e:	4770      	bx	lr

080015a0 <vClearInterruptMaskFromISR>:
	__asm volatile(
 80015a0:	f380 8810 	msr	PRIMASK, r0
 80015a4:	4770      	bx	lr
	...

080015b0 <PendSV_Handler>:
	__asm volatile
 80015b0:	f3ef 8009 	mrs	r0, PSP
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <pxCurrentTCBConst>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	3820      	subs	r0, #32
 80015ba:	6010      	str	r0, [r2, #0]
 80015bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80015be:	4644      	mov	r4, r8
 80015c0:	464d      	mov	r5, r9
 80015c2:	4656      	mov	r6, sl
 80015c4:	465f      	mov	r7, fp
 80015c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80015c8:	b508      	push	{r3, lr}
 80015ca:	b672      	cpsid	i
 80015cc:	f000 fb5c 	bl	8001c88 <vTaskSwitchContext>
 80015d0:	b662      	cpsie	i
 80015d2:	bc0c      	pop	{r2, r3}
 80015d4:	6811      	ldr	r1, [r2, #0]
 80015d6:	6808      	ldr	r0, [r1, #0]
 80015d8:	3010      	adds	r0, #16
 80015da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80015dc:	46a0      	mov	r8, r4
 80015de:	46a9      	mov	r9, r5
 80015e0:	46b2      	mov	sl, r6
 80015e2:	46bb      	mov	fp, r7
 80015e4:	f380 8809 	msr	PSP, r0
 80015e8:	3820      	subs	r0, #32
 80015ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80015ec:	4718      	bx	r3
 80015ee:	46c0      	nop			; (mov r8, r8)

080015f0 <pxCurrentTCBConst>:
 80015f0:	20000c3c 	.word	0x20000c3c

080015f4 <xPortSysTickHandler>:
{
 80015f4:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80015f6:	f7ff ffcf 	bl	8001598 <ulSetInterruptMaskFromISR>
 80015fa:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 80015fc:	f000 fa44 	bl	8001a88 <xTaskIncrementTick>
 8001600:	2800      	cmp	r0, #0
 8001602:	d003      	beq.n	800160c <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8001604:	2280      	movs	r2, #128	; 0x80
 8001606:	4b03      	ldr	r3, [pc, #12]	; (8001614 <xPortSysTickHandler+0x20>)
 8001608:	0552      	lsls	r2, r2, #21
 800160a:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800160c:	0020      	movs	r0, r4
 800160e:	f7ff ffc7 	bl	80015a0 <vClearInterruptMaskFromISR>
}
 8001612:	bd10      	pop	{r4, pc}
 8001614:	e000ed04 	.word	0xe000ed04

08001618 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001618:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <prvInsertBlockIntoFreeList+0x40>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	4282      	cmp	r2, r0
 8001620:	d318      	bcc.n	8001654 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001622:	685c      	ldr	r4, [r3, #4]
 8001624:	1919      	adds	r1, r3, r4
 8001626:	4288      	cmp	r0, r1
 8001628:	d103      	bne.n	8001632 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800162a:	6841      	ldr	r1, [r0, #4]
 800162c:	0018      	movs	r0, r3
 800162e:	1909      	adds	r1, r1, r4
 8001630:	6059      	str	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001632:	6841      	ldr	r1, [r0, #4]
 8001634:	1844      	adds	r4, r0, r1
 8001636:	42a2      	cmp	r2, r4
 8001638:	d107      	bne.n	800164a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800163a:	4c08      	ldr	r4, [pc, #32]	; (800165c <prvInsertBlockIntoFreeList+0x44>)
 800163c:	6824      	ldr	r4, [r4, #0]
 800163e:	42a2      	cmp	r2, r4
 8001640:	d003      	beq.n	800164a <prvInsertBlockIntoFreeList+0x32>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001642:	6854      	ldr	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001644:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001646:	1861      	adds	r1, r4, r1
 8001648:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800164a:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800164c:	4298      	cmp	r0, r3
 800164e:	d000      	beq.n	8001652 <prvInsertBlockIntoFreeList+0x3a>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001650:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001652:	bd10      	pop	{r4, pc}
 8001654:	0013      	movs	r3, r2
 8001656:	e7e1      	b.n	800161c <prvInsertBlockIntoFreeList+0x4>
 8001658:	20000c34 	.word	0x20000c34
 800165c:	20000024 	.word	0x20000024

08001660 <pvPortMalloc>:
{
 8001660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001662:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8001664:	f000 fa08 	bl	8001a78 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001668:	4a38      	ldr	r2, [pc, #224]	; (800174c <pvPortMalloc+0xec>)
 800166a:	4839      	ldr	r0, [pc, #228]	; (8001750 <pvPortMalloc+0xf0>)
 800166c:	6813      	ldr	r3, [r2, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11e      	bne.n	80016b0 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 8001672:	4938      	ldr	r1, [pc, #224]	; (8001754 <pvPortMalloc+0xf4>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001674:	3307      	adds	r3, #7
 8001676:	4219      	tst	r1, r3
 8001678:	d036      	beq.n	80016e8 <pvPortMalloc+0x88>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800167a:	18cd      	adds	r5, r1, r3
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800167c:	439d      	bics	r5, r3
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800167e:	23c0      	movs	r3, #192	; 0xc0
 8001680:	011b      	lsls	r3, r3, #4
 8001682:	18c9      	adds	r1, r1, r3
 8001684:	1b4b      	subs	r3, r1, r5
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001686:	0029      	movs	r1, r5
	xStart.xBlockSize = ( size_t ) 0;
 8001688:	2500      	movs	r5, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800168a:	4e33      	ldr	r6, [pc, #204]	; (8001758 <pvPortMalloc+0xf8>)
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800168c:	18cb      	adds	r3, r1, r3
	xStart.xBlockSize = ( size_t ) 0;
 800168e:	6075      	str	r5, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001690:	6031      	str	r1, [r6, #0]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001692:	2607      	movs	r6, #7
	uxAddress -= xHeapStructSize;
 8001694:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001696:	43b3      	bics	r3, r6
	pxEnd->pxNextFreeBlock = NULL;
 8001698:	601d      	str	r5, [r3, #0]
	pxEnd->xBlockSize = 0;
 800169a:	605d      	str	r5, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800169c:	1a5d      	subs	r5, r3, r1
	pxEnd = ( void * ) uxAddress;
 800169e:	6013      	str	r3, [r2, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80016a0:	c128      	stmia	r1!, {r3, r5}
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016a2:	4b2e      	ldr	r3, [pc, #184]	; (800175c <pvPortMalloc+0xfc>)
 80016a4:	601d      	str	r5, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <pvPortMalloc+0x100>)
 80016a8:	601d      	str	r5, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	6003      	str	r3, [r0, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80016b0:	6806      	ldr	r6, [r0, #0]
 80016b2:	4234      	tst	r4, r6
 80016b4:	d116      	bne.n	80016e4 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 80016b6:	2c00      	cmp	r4, #0
 80016b8:	d014      	beq.n	80016e4 <pvPortMalloc+0x84>
				xWantedSize += xHeapStructSize;
 80016ba:	0023      	movs	r3, r4
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016bc:	2107      	movs	r1, #7
				xWantedSize += xHeapStructSize;
 80016be:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80016c0:	420b      	tst	r3, r1
 80016c2:	d001      	beq.n	80016c8 <pvPortMalloc+0x68>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80016c4:	438b      	bics	r3, r1
 80016c6:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d00b      	beq.n	80016e4 <pvPortMalloc+0x84>
 80016cc:	4924      	ldr	r1, [pc, #144]	; (8001760 <pvPortMalloc+0x100>)
 80016ce:	680d      	ldr	r5, [r1, #0]
 80016d0:	42ab      	cmp	r3, r5
 80016d2:	d807      	bhi.n	80016e4 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 80016d4:	4920      	ldr	r1, [pc, #128]	; (8001758 <pvPortMalloc+0xf8>)
 80016d6:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016d8:	6860      	ldr	r0, [r4, #4]
 80016da:	4283      	cmp	r3, r0
 80016dc:	d807      	bhi.n	80016ee <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	4294      	cmp	r4, r2
 80016e2:	d10b      	bne.n	80016fc <pvPortMalloc+0x9c>
void *pvReturn = NULL;
 80016e4:	2500      	movs	r5, #0
 80016e6:	e028      	b.n	800173a <pvPortMalloc+0xda>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80016e8:	23c0      	movs	r3, #192	; 0xc0
 80016ea:	011b      	lsls	r3, r3, #4
 80016ec:	e7cc      	b.n	8001688 <pvPortMalloc+0x28>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80016ee:	6827      	ldr	r7, [r4, #0]
 80016f0:	46bc      	mov	ip, r7
 80016f2:	2f00      	cmp	r7, #0
 80016f4:	d0f3      	beq.n	80016de <pvPortMalloc+0x7e>
 80016f6:	0021      	movs	r1, r4
 80016f8:	4664      	mov	r4, ip
 80016fa:	e7ed      	b.n	80016d8 <pvPortMalloc+0x78>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80016fc:	680a      	ldr	r2, [r1, #0]
 80016fe:	0017      	movs	r7, r2
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001700:	6822      	ldr	r2, [r4, #0]
 8001702:	600a      	str	r2, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001704:	1ac2      	subs	r2, r0, r3
 8001706:	2a10      	cmp	r2, #16
 8001708:	d908      	bls.n	800171c <pvPortMalloc+0xbc>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800170a:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800170c:	0741      	lsls	r1, r0, #29
 800170e:	d001      	beq.n	8001714 <pvPortMalloc+0xb4>
 8001710:	b672      	cpsid	i
 8001712:	e7fe      	b.n	8001712 <pvPortMalloc+0xb2>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001714:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001716:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001718:	f7ff ff7e 	bl	8001618 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800171c:	6863      	ldr	r3, [r4, #4]
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <pvPortMalloc+0x100>)
 8001720:	1aed      	subs	r5, r5, r3
 8001722:	6015      	str	r5, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <pvPortMalloc+0xfc>)
 8001726:	6811      	ldr	r1, [r2, #0]
 8001728:	428d      	cmp	r5, r1
 800172a:	d200      	bcs.n	800172e <pvPortMalloc+0xce>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800172c:	6015      	str	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800172e:	431e      	orrs	r6, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001730:	003d      	movs	r5, r7
					pxBlock->pxNextFreeBlock = NULL;
 8001732:	2300      	movs	r3, #0
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001734:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001736:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001738:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 800173a:	f000 fa23 	bl	8001b84 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800173e:	076b      	lsls	r3, r5, #29
 8001740:	d001      	beq.n	8001746 <pvPortMalloc+0xe6>
 8001742:	b672      	cpsid	i
 8001744:	e7fe      	b.n	8001744 <pvPortMalloc+0xe4>
}
 8001746:	0028      	movs	r0, r5
 8001748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	20000024 	.word	0x20000024
 8001750:	20000c28 	.word	0x20000c28
 8001754:	20000028 	.word	0x20000028
 8001758:	20000c34 	.word	0x20000c34
 800175c:	20000c30 	.word	0x20000c30
 8001760:	20000c2c 	.word	0x20000c2c

08001764 <vPortFree>:
{
 8001764:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001766:	2800      	cmp	r0, #0
 8001768:	d01b      	beq.n	80017a2 <vPortFree+0x3e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <vPortFree+0x40>)
 800176c:	3808      	subs	r0, #8
 800176e:	6843      	ldr	r3, [r0, #4]
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	0004      	movs	r4, r0
 8001774:	421a      	tst	r2, r3
 8001776:	d101      	bne.n	800177c <vPortFree+0x18>
 8001778:	b672      	cpsid	i
 800177a:	e7fe      	b.n	800177a <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800177c:	6801      	ldr	r1, [r0, #0]
 800177e:	2900      	cmp	r1, #0
 8001780:	d001      	beq.n	8001786 <vPortFree+0x22>
 8001782:	b672      	cpsid	i
 8001784:	e7fe      	b.n	8001784 <vPortFree+0x20>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001786:	4393      	bics	r3, r2
 8001788:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 800178a:	f000 f975 	bl	8001a78 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800178e:	4a06      	ldr	r2, [pc, #24]	; (80017a8 <vPortFree+0x44>)
 8001790:	6863      	ldr	r3, [r4, #4]
 8001792:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001794:	0020      	movs	r0, r4
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001796:	185b      	adds	r3, r3, r1
 8001798:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800179a:	f7ff ff3d 	bl	8001618 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800179e:	f000 f9f1 	bl	8001b84 <xTaskResumeAll>
}
 80017a2:	bd10      	pop	{r4, pc}
 80017a4:	20000c28 	.word	0x20000c28
 80017a8:	20000c2c 	.word	0x20000c2c

080017ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <prvResetNextTaskUnblockTime+0x20>)
 80017ae:	6813      	ldr	r3, [r2, #0]
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <prvResetNextTaskUnblockTime+0x24>)
 80017b4:	2900      	cmp	r1, #0
 80017b6:	d103      	bne.n	80017c0 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80017b8:	2201      	movs	r2, #1
 80017ba:	4252      	negs	r2, r2
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017bc:	601a      	str	r2, [r3, #0]
	}
}
 80017be:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017c4:	68d2      	ldr	r2, [r2, #12]
 80017c6:	6852      	ldr	r2, [r2, #4]
 80017c8:	e7f8      	b.n	80017bc <prvResetNextTaskUnblockTime+0x10>
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	20000c40 	.word	0x20000c40
 80017d0:	20000d18 	.word	0x20000d18

080017d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80017d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d6:	0004      	movs	r4, r0
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <prvAddCurrentTaskToDelayedList+0x58>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017da:	4d15      	ldr	r5, [pc, #84]	; (8001830 <prvAddCurrentTaskToDelayedList+0x5c>)
const TickType_t xConstTickCount = xTickCount;
 80017dc:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017de:	6828      	ldr	r0, [r5, #0]
{
 80017e0:	000f      	movs	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80017e2:	3004      	adds	r0, #4
 80017e4:	f7ff fe2a 	bl	800143c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80017e8:	1c63      	adds	r3, r4, #1
 80017ea:	d107      	bne.n	80017fc <prvAddCurrentTaskToDelayedList+0x28>
 80017ec:	2f00      	cmp	r7, #0
 80017ee:	d005      	beq.n	80017fc <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80017f0:	6829      	ldr	r1, [r5, #0]
 80017f2:	4810      	ldr	r0, [pc, #64]	; (8001834 <prvAddCurrentTaskToDelayedList+0x60>)
 80017f4:	3104      	adds	r1, #4
 80017f6:	f7ff fdfe 	bl	80013f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80017fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80017fc:	682b      	ldr	r3, [r5, #0]
			xTimeToWake = xConstTickCount + xTicksToWait;
 80017fe:	1934      	adds	r4, r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001800:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8001802:	42a6      	cmp	r6, r4
 8001804:	d906      	bls.n	8001814 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <prvAddCurrentTaskToDelayedList+0x64>)
 8001808:	6818      	ldr	r0, [r3, #0]
 800180a:	6829      	ldr	r1, [r5, #0]
 800180c:	3104      	adds	r1, #4
 800180e:	f7ff fdfe 	bl	800140e <vListInsert>
 8001812:	e7f2      	b.n	80017fa <prvAddCurrentTaskToDelayedList+0x26>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <prvAddCurrentTaskToDelayedList+0x68>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	6829      	ldr	r1, [r5, #0]
 800181a:	3104      	adds	r1, #4
 800181c:	f7ff fdf7 	bl	800140e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <prvAddCurrentTaskToDelayedList+0x6c>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4294      	cmp	r4, r2
 8001826:	d2e8      	bcs.n	80017fa <prvAddCurrentTaskToDelayedList+0x26>
					xNextTaskUnblockTime = xTimeToWake;
 8001828:	601c      	str	r4, [r3, #0]
}
 800182a:	e7e6      	b.n	80017fa <prvAddCurrentTaskToDelayedList+0x26>
 800182c:	20000d60 	.word	0x20000d60
 8001830:	20000c3c 	.word	0x20000c3c
 8001834:	20000d38 	.word	0x20000d38
 8001838:	20000c44 	.word	0x20000c44
 800183c:	20000c40 	.word	0x20000c40
 8001840:	20000d18 	.word	0x20000d18

08001844 <prvIdleTask>:
{
 8001844:	b570      	push	{r4, r5, r6, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001846:	4c11      	ldr	r4, [pc, #68]	; (800188c <prvIdleTask+0x48>)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d106      	bne.n	800185c <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <prvIdleTask+0x4c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d9f7      	bls.n	8001846 <prvIdleTask+0x2>
				taskYIELD();
 8001856:	f7ff fe79 	bl	800154c <vPortYield>
 800185a:	e7f4      	b.n	8001846 <prvIdleTask+0x2>
			taskENTER_CRITICAL();
 800185c:	f7ff fe82 	bl	8001564 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <prvIdleTask+0x50>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001866:	1d28      	adds	r0, r5, #4
 8001868:	f7ff fde8 	bl	800143c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <prvIdleTask+0x54>)
 800186e:	6813      	ldr	r3, [r2, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	3b01      	subs	r3, #1
 8001878:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800187a:	f7ff fe7f 	bl	800157c <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800187e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001880:	f7ff ff70 	bl	8001764 <vPortFree>
			vPortFree( pxTCB );
 8001884:	0028      	movs	r0, r5
 8001886:	f7ff ff6d 	bl	8001764 <vPortFree>
 800188a:	e7dc      	b.n	8001846 <prvIdleTask+0x2>
 800188c:	20000cd8 	.word	0x20000cd8
 8001890:	20000c48 	.word	0x20000c48
 8001894:	20000d4c 	.word	0x20000d4c
 8001898:	20000cd4 	.word	0x20000cd4

0800189c <xTaskCreate>:
	{
 800189c:	b5f0      	push	{r4, r5, r6, r7, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800189e:	0095      	lsls	r5, r2, #2
	{
 80018a0:	b085      	sub	sp, #20
 80018a2:	9002      	str	r0, [sp, #8]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018a4:	0028      	movs	r0, r5
	{
 80018a6:	000f      	movs	r7, r1
 80018a8:	9303      	str	r3, [sp, #12]
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018aa:	f7ff fed9 	bl	8001660 <pvPortMalloc>
 80018ae:	1e06      	subs	r6, r0, #0
			if( pxStack != NULL )
 80018b0:	d100      	bne.n	80018b4 <xTaskCreate+0x18>
 80018b2:	e08e      	b.n	80019d2 <xTaskCreate+0x136>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80018b4:	2054      	movs	r0, #84	; 0x54
 80018b6:	f7ff fed3 	bl	8001660 <pvPortMalloc>
 80018ba:	1e04      	subs	r4, r0, #0
				if( pxNewTCB != NULL )
 80018bc:	d100      	bne.n	80018c0 <xTaskCreate+0x24>
 80018be:	e085      	b.n	80019cc <xTaskCreate+0x130>
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80018c0:	2307      	movs	r3, #7
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80018c2:	3d04      	subs	r5, #4
					pxNewTCB->pxStack = pxStack;
 80018c4:	6306      	str	r6, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80018c6:	1976      	adds	r6, r6, r5
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80018c8:	439e      	bics	r6, r3
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018ca:	2300      	movs	r3, #0
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80018cc:	9600      	str	r6, [sp, #0]
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80018ce:	001a      	movs	r2, r3
 80018d0:	5cf9      	ldrb	r1, [r7, r3]
 80018d2:	3234      	adds	r2, #52	; 0x34
 80018d4:	54a1      	strb	r1, [r4, r2]
		if( pcName[ x ] == 0x00 )
 80018d6:	5cfa      	ldrb	r2, [r7, r3]
 80018d8:	2a00      	cmp	r2, #0
 80018da:	d002      	beq.n	80018e2 <xTaskCreate+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80018dc:	3301      	adds	r3, #1
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d1f5      	bne.n	80018ce <xTaskCreate+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80018e2:	0023      	movs	r3, r4
 80018e4:	2500      	movs	r5, #0
 80018e6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80018e8:	3343      	adds	r3, #67	; 0x43
 80018ea:	701d      	strb	r5, [r3, #0]
 80018ec:	2e06      	cmp	r6, #6
 80018ee:	d900      	bls.n	80018f2 <xTaskCreate+0x56>
 80018f0:	2606      	movs	r6, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018f2:	1d23      	adds	r3, r4, #4
 80018f4:	0018      	movs	r0, r3
	pxNewTCB->uxPriority = uxPriority;
 80018f6:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80018f8:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80018fa:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	f7ff fd77 	bl	80013f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001902:	0020      	movs	r0, r4
 8001904:	3018      	adds	r0, #24
 8001906:	f7ff fd73 	bl	80013f0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800190a:	2307      	movs	r3, #7
 800190c:	1b9e      	subs	r6, r3, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800190e:	0023      	movs	r3, r4
 8001910:	3350      	adds	r3, #80	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001912:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001914:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001916:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8001918:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800191a:	9a03      	ldr	r2, [sp, #12]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800191c:	701d      	strb	r5, [r3, #0]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800191e:	9902      	ldr	r1, [sp, #8]
 8001920:	9800      	ldr	r0, [sp, #0]
 8001922:	f7ff fdcf 	bl	80014c4 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 8001926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001928:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800192a:	2b00      	cmp	r3, #0
 800192c:	d000      	beq.n	8001930 <xTaskCreate+0x94>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800192e:	601c      	str	r4, [r3, #0]
	taskENTER_CRITICAL();
 8001930:	f7ff fe18 	bl	8001564 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001934:	4b2e      	ldr	r3, [pc, #184]	; (80019f0 <xTaskCreate+0x154>)
		if( pxCurrentTCB == NULL )
 8001936:	4d2f      	ldr	r5, [pc, #188]	; (80019f4 <xTaskCreate+0x158>)
		uxCurrentNumberOfTasks++;
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	3201      	adds	r2, #1
 800193c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800193e:	682a      	ldr	r2, [r5, #0]
 8001940:	2a00      	cmp	r2, #0
 8001942:	d149      	bne.n	80019d8 <xTaskCreate+0x13c>
			pxCurrentTCB = pxNewTCB;
 8001944:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d11d      	bne.n	8001988 <xTaskCreate+0xec>
 800194c:	4e2a      	ldr	r6, [pc, #168]	; (80019f8 <xTaskCreate+0x15c>)
 800194e:	0037      	movs	r7, r6
 8001950:	378c      	adds	r7, #140	; 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001952:	0030      	movs	r0, r6
 8001954:	3614      	adds	r6, #20
 8001956:	f7ff fd40 	bl	80013da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800195a:	42b7      	cmp	r7, r6
 800195c:	d1f9      	bne.n	8001952 <xTaskCreate+0xb6>
	vListInitialise( &xDelayedTaskList1 );
 800195e:	4e27      	ldr	r6, [pc, #156]	; (80019fc <xTaskCreate+0x160>)
 8001960:	0030      	movs	r0, r6
 8001962:	f7ff fd3a 	bl	80013da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001966:	4f26      	ldr	r7, [pc, #152]	; (8001a00 <xTaskCreate+0x164>)
 8001968:	0038      	movs	r0, r7
 800196a:	f7ff fd36 	bl	80013da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800196e:	4825      	ldr	r0, [pc, #148]	; (8001a04 <xTaskCreate+0x168>)
 8001970:	f7ff fd33 	bl	80013da <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001974:	4824      	ldr	r0, [pc, #144]	; (8001a08 <xTaskCreate+0x16c>)
 8001976:	f7ff fd30 	bl	80013da <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800197a:	4824      	ldr	r0, [pc, #144]	; (8001a0c <xTaskCreate+0x170>)
 800197c:	f7ff fd2d 	bl	80013da <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001980:	4b23      	ldr	r3, [pc, #140]	; (8001a10 <xTaskCreate+0x174>)
 8001982:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001984:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <xTaskCreate+0x178>)
 8001986:	601f      	str	r7, [r3, #0]
		uxTaskNumber++;
 8001988:	4a23      	ldr	r2, [pc, #140]	; (8001a18 <xTaskCreate+0x17c>)
 800198a:	6813      	ldr	r3, [r2, #0]
 800198c:	3301      	adds	r3, #1
 800198e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001990:	4a22      	ldr	r2, [pc, #136]	; (8001a1c <xTaskCreate+0x180>)
 8001992:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001994:	6811      	ldr	r1, [r2, #0]
 8001996:	428b      	cmp	r3, r1
 8001998:	d900      	bls.n	800199c <xTaskCreate+0x100>
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	2014      	movs	r0, #20
 800199e:	4358      	muls	r0, r3
 80019a0:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <xTaskCreate+0x15c>)
 80019a2:	9901      	ldr	r1, [sp, #4]
 80019a4:	1818      	adds	r0, r3, r0
 80019a6:	f7ff fd26 	bl	80013f6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80019aa:	f7ff fde7 	bl	800157c <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <xTaskCreate+0x184>)
			xReturn = pdPASS;
 80019b0:	2601      	movs	r6, #1
	if( xSchedulerRunning != pdFALSE )
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <xTaskCreate+0x12a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80019b8:	682b      	ldr	r3, [r5, #0]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019be:	429a      	cmp	r2, r3
 80019c0:	d201      	bcs.n	80019c6 <xTaskCreate+0x12a>
			taskYIELD_IF_USING_PREEMPTION();
 80019c2:	f7ff fdc3 	bl	800154c <vPortYield>
	}
 80019c6:	0030      	movs	r0, r6
 80019c8:	b005      	add	sp, #20
 80019ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
					vPortFree( pxStack );
 80019cc:	0030      	movs	r0, r6
 80019ce:	f7ff fec9 	bl	8001764 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80019d2:	2601      	movs	r6, #1
 80019d4:	4276      	negs	r6, r6
 80019d6:	e7f6      	b.n	80019c6 <xTaskCreate+0x12a>
			if( xSchedulerRunning == pdFALSE )
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <xTaskCreate+0x184>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1d3      	bne.n	8001988 <xTaskCreate+0xec>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d8ce      	bhi.n	8001988 <xTaskCreate+0xec>
					pxCurrentTCB = pxNewTCB;
 80019ea:	602c      	str	r4, [r5, #0]
 80019ec:	e7cc      	b.n	8001988 <xTaskCreate+0xec>
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	20000cd4 	.word	0x20000cd4
 80019f4:	20000c3c 	.word	0x20000c3c
 80019f8:	20000c48 	.word	0x20000c48
 80019fc:	20000cec 	.word	0x20000cec
 8001a00:	20000d00 	.word	0x20000d00
 8001a04:	20000d20 	.word	0x20000d20
 8001a08:	20000d4c 	.word	0x20000d4c
 8001a0c:	20000d38 	.word	0x20000d38
 8001a10:	20000c40 	.word	0x20000c40
 8001a14:	20000c44 	.word	0x20000c44
 8001a18:	20000ce4 	.word	0x20000ce4
 8001a1c:	20000ce8 	.word	0x20000ce8
 8001a20:	20000d34 	.word	0x20000d34

08001a24 <vTaskStartScheduler>:
{
 8001a24:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001a26:	2400      	movs	r4, #0
 8001a28:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <vTaskStartScheduler+0x3c>)
 8001a2a:	9400      	str	r4, [sp, #0]
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	0023      	movs	r3, r4
 8001a32:	490c      	ldr	r1, [pc, #48]	; (8001a64 <vTaskStartScheduler+0x40>)
 8001a34:	480c      	ldr	r0, [pc, #48]	; (8001a68 <vTaskStartScheduler+0x44>)
 8001a36:	f7ff ff31 	bl	800189c <xTaskCreate>
	if( xReturn == pdPASS )
 8001a3a:	2801      	cmp	r0, #1
 8001a3c:	d10b      	bne.n	8001a56 <vTaskStartScheduler+0x32>
		portDISABLE_INTERRUPTS();
 8001a3e:	b672      	cpsid	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8001a40:	2201      	movs	r2, #1
 8001a42:	4b0a      	ldr	r3, [pc, #40]	; (8001a6c <vTaskStartScheduler+0x48>)
 8001a44:	4252      	negs	r2, r2
 8001a46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001a48:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <vTaskStartScheduler+0x4c>)
 8001a4a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <vTaskStartScheduler+0x50>)
 8001a4e:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8001a50:	f7ff fd4a 	bl	80014e8 <xPortStartScheduler>
}
 8001a54:	bd13      	pop	{r0, r1, r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001a56:	1c43      	adds	r3, r0, #1
 8001a58:	d1fc      	bne.n	8001a54 <vTaskStartScheduler+0x30>
 8001a5a:	b672      	cpsid	i
 8001a5c:	e7fe      	b.n	8001a5c <vTaskStartScheduler+0x38>
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	20000d14 	.word	0x20000d14
 8001a64:	08002109 	.word	0x08002109
 8001a68:	08001845 	.word	0x08001845
 8001a6c:	20000d18 	.word	0x20000d18
 8001a70:	20000d34 	.word	0x20000d34
 8001a74:	20000d60 	.word	0x20000d60

08001a78 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001a78:	4a02      	ldr	r2, [pc, #8]	; (8001a84 <vTaskSuspendAll+0xc>)
 8001a7a:	6813      	ldr	r3, [r2, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	4770      	bx	lr
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	20000ce0 	.word	0x20000ce0

08001a88 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a88:	4b33      	ldr	r3, [pc, #204]	; (8001b58 <xTaskIncrementTick+0xd0>)
{
 8001a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d135      	bne.n	8001afe <xTaskIncrementTick+0x76>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <xTaskIncrementTick+0xd4>)
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001a98:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a9a:	2c00      	cmp	r4, #0
 8001a9c:	d111      	bne.n	8001ac2 <xTaskIncrementTick+0x3a>
			taskSWITCH_DELAYED_LISTS();
 8001a9e:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <xTaskIncrementTick+0xd8>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	2a00      	cmp	r2, #0
 8001aa6:	d001      	beq.n	8001aac <xTaskIncrementTick+0x24>
 8001aa8:	b672      	cpsid	i
 8001aaa:	e7fe      	b.n	8001aaa <xTaskIncrementTick+0x22>
 8001aac:	4a2d      	ldr	r2, [pc, #180]	; (8001b64 <xTaskIncrementTick+0xdc>)
 8001aae:	6819      	ldr	r1, [r3, #0]
 8001ab0:	6810      	ldr	r0, [r2, #0]
 8001ab2:	6018      	str	r0, [r3, #0]
 8001ab4:	6011      	str	r1, [r2, #0]
 8001ab6:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <xTaskIncrementTick+0xe0>)
 8001ab8:	6813      	ldr	r3, [r2, #0]
 8001aba:	3301      	adds	r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	f7ff fe75 	bl	80017ac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ac2:	4f2a      	ldr	r7, [pc, #168]	; (8001b6c <xTaskIncrementTick+0xe4>)
BaseType_t xSwitchRequired = pdFALSE;
 8001ac4:	2600      	movs	r6, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	429c      	cmp	r4, r3
 8001aca:	d307      	bcc.n	8001adc <xTaskIncrementTick+0x54>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001acc:	4b24      	ldr	r3, [pc, #144]	; (8001b60 <xTaskIncrementTick+0xd8>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d119      	bne.n	8001b0a <xTaskIncrementTick+0x82>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	425b      	negs	r3, r3
 8001ada:	603b      	str	r3, [r7, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <xTaskIncrementTick+0xe8>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae2:	2314      	movs	r3, #20
 8001ae4:	4353      	muls	r3, r2
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <xTaskIncrementTick+0xec>)
 8001ae8:	58d3      	ldr	r3, [r2, r3]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d900      	bls.n	8001af0 <xTaskIncrementTick+0x68>
				xSwitchRequired = pdTRUE;
 8001aee:	2601      	movs	r6, #1
		if( xYieldPending != pdFALSE )
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <xTaskIncrementTick+0xf0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d000      	beq.n	8001afa <xTaskIncrementTick+0x72>
			xSwitchRequired = pdTRUE;
 8001af8:	2601      	movs	r6, #1
}
 8001afa:	0030      	movs	r0, r6
 8001afc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		++uxPendedTicks;
 8001afe:	4a1f      	ldr	r2, [pc, #124]	; (8001b7c <xTaskIncrementTick+0xf4>)
BaseType_t xSwitchRequired = pdFALSE;
 8001b00:	2600      	movs	r6, #0
		++uxPendedTicks;
 8001b02:	6813      	ldr	r3, [r2, #0]
 8001b04:	3301      	adds	r3, #1
 8001b06:	6013      	str	r3, [r2, #0]
 8001b08:	e7f2      	b.n	8001af0 <xTaskIncrementTick+0x68>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	68dd      	ldr	r5, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b10:	686b      	ldr	r3, [r5, #4]
					if( xConstTickCount < xItemValue )
 8001b12:	429c      	cmp	r4, r3
 8001b14:	d3e1      	bcc.n	8001ada <xTaskIncrementTick+0x52>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b16:	1d2b      	adds	r3, r5, #4
 8001b18:	0018      	movs	r0, r3
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	f7ff fc8e 	bl	800143c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b20:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <xTaskIncrementTick+0xa6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b26:	0028      	movs	r0, r5
 8001b28:	3018      	adds	r0, #24
 8001b2a:	f7ff fc87 	bl	800143c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001b2e:	4b14      	ldr	r3, [pc, #80]	; (8001b80 <xTaskIncrementTick+0xf8>)
 8001b30:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4290      	cmp	r0, r2
 8001b36:	d900      	bls.n	8001b3a <xTaskIncrementTick+0xb2>
 8001b38:	6018      	str	r0, [r3, #0]
 8001b3a:	2314      	movs	r3, #20
 8001b3c:	4358      	muls	r0, r3
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <xTaskIncrementTick+0xec>)
 8001b40:	1d29      	adds	r1, r5, #4
 8001b42:	1818      	adds	r0, r3, r0
 8001b44:	f7ff fc57 	bl	80013f6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <xTaskIncrementTick+0xe8>)
 8001b4a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d3bb      	bcc.n	8001acc <xTaskIncrementTick+0x44>
							xSwitchRequired = pdTRUE;
 8001b54:	2601      	movs	r6, #1
 8001b56:	e7b9      	b.n	8001acc <xTaskIncrementTick+0x44>
 8001b58:	20000ce0 	.word	0x20000ce0
 8001b5c:	20000d60 	.word	0x20000d60
 8001b60:	20000c40 	.word	0x20000c40
 8001b64:	20000c44 	.word	0x20000c44
 8001b68:	20000d1c 	.word	0x20000d1c
 8001b6c:	20000d18 	.word	0x20000d18
 8001b70:	20000c3c 	.word	0x20000c3c
 8001b74:	20000c48 	.word	0x20000c48
 8001b78:	20000d64 	.word	0x20000d64
 8001b7c:	20000cdc 	.word	0x20000cdc
 8001b80:	20000ce8 	.word	0x20000ce8

08001b84 <xTaskResumeAll>:
{
 8001b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 8001b86:	4c2b      	ldr	r4, [pc, #172]	; (8001c34 <xTaskResumeAll+0xb0>)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <xTaskResumeAll+0xe>
 8001b8e:	b672      	cpsid	i
 8001b90:	e7fe      	b.n	8001b90 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 8001b92:	f7ff fce7 	bl	8001564 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001b96:	6823      	ldr	r3, [r4, #0]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b9c:	6824      	ldr	r4, [r4, #0]
 8001b9e:	2c00      	cmp	r4, #0
 8001ba0:	d004      	beq.n	8001bac <xTaskResumeAll+0x28>
BaseType_t xAlreadyYielded = pdFALSE;
 8001ba2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001ba4:	f7ff fcea 	bl	800157c <vPortExitCritical>
}
 8001ba8:	0020      	movs	r0, r4
 8001baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <xTaskResumeAll+0xb4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f6      	beq.n	8001ba2 <xTaskResumeAll+0x1e>
					prvAddTaskToReadyList( pxTCB );
 8001bb4:	2614      	movs	r6, #20
						xYieldPending = pdTRUE;
 8001bb6:	2701      	movs	r7, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <xTaskResumeAll+0xb8>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d11a      	bne.n	8001bf6 <xTaskResumeAll+0x72>
				if( pxTCB != NULL )
 8001bc0:	2c00      	cmp	r4, #0
 8001bc2:	d001      	beq.n	8001bc8 <xTaskResumeAll+0x44>
					prvResetNextTaskUnblockTime();
 8001bc4:	f7ff fdf2 	bl	80017ac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001bc8:	4d1d      	ldr	r5, [pc, #116]	; (8001c40 <xTaskResumeAll+0xbc>)
 8001bca:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001bcc:	2c00      	cmp	r4, #0
 8001bce:	d00a      	beq.n	8001be6 <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 8001bd0:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001bd2:	f7ff ff59 	bl	8001a88 <xTaskIncrementTick>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d001      	beq.n	8001bde <xTaskResumeAll+0x5a>
								xYieldPending = pdTRUE;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <xTaskResumeAll+0xc0>)
 8001bdc:	601e      	str	r6, [r3, #0]
							--uxPendedCounts;
 8001bde:	3c01      	subs	r4, #1
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001be0:	2c00      	cmp	r4, #0
 8001be2:	d1f6      	bne.n	8001bd2 <xTaskResumeAll+0x4e>
						uxPendedTicks = 0;
 8001be4:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <xTaskResumeAll+0xc0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0d9      	beq.n	8001ba2 <xTaskResumeAll+0x1e>
					taskYIELD_IF_USING_PREEMPTION();
 8001bee:	f7ff fcad 	bl	800154c <vPortYield>
						xAlreadyYielded = pdTRUE;
 8001bf2:	2401      	movs	r4, #1
 8001bf4:	e7d6      	b.n	8001ba4 <xTaskResumeAll+0x20>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bfa:	0020      	movs	r0, r4
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bfc:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bfe:	3018      	adds	r0, #24
 8001c00:	f7ff fc1c 	bl	800143c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001c04:	0028      	movs	r0, r5
 8001c06:	f7ff fc19 	bl	800143c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <xTaskResumeAll+0xc4>)
 8001c0c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4290      	cmp	r0, r2
 8001c12:	d900      	bls.n	8001c16 <xTaskResumeAll+0x92>
 8001c14:	6018      	str	r0, [r3, #0]
 8001c16:	4370      	muls	r0, r6
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <xTaskResumeAll+0xc8>)
 8001c1a:	0029      	movs	r1, r5
 8001c1c:	1818      	adds	r0, r3, r0
 8001c1e:	f7ff fbea 	bl	80013f6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c22:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <xTaskResumeAll+0xcc>)
 8001c24:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3c4      	bcc.n	8001bb8 <xTaskResumeAll+0x34>
						xYieldPending = pdTRUE;
 8001c2e:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <xTaskResumeAll+0xc0>)
 8001c30:	601f      	str	r7, [r3, #0]
 8001c32:	e7c1      	b.n	8001bb8 <xTaskResumeAll+0x34>
 8001c34:	20000ce0 	.word	0x20000ce0
 8001c38:	20000cd4 	.word	0x20000cd4
 8001c3c:	20000d20 	.word	0x20000d20
 8001c40:	20000cdc 	.word	0x20000cdc
 8001c44:	20000d64 	.word	0x20000d64
 8001c48:	20000ce8 	.word	0x20000ce8
 8001c4c:	20000c48 	.word	0x20000c48
 8001c50:	20000c3c 	.word	0x20000c3c

08001c54 <vTaskDelay>:
	{
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c58:	d102      	bne.n	8001c60 <vTaskDelay+0xc>
			portYIELD_WITHIN_API();
 8001c5a:	f7ff fc77 	bl	800154c <vPortYield>
	}
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001c60:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <vTaskDelay+0x30>)
 8001c62:	681d      	ldr	r5, [r3, #0]
 8001c64:	2d00      	cmp	r5, #0
 8001c66:	d001      	beq.n	8001c6c <vTaskDelay+0x18>
 8001c68:	b672      	cpsid	i
 8001c6a:	e7fe      	b.n	8001c6a <vTaskDelay+0x16>
			vTaskSuspendAll();
 8001c6c:	f7ff ff04 	bl	8001a78 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c70:	0029      	movs	r1, r5
 8001c72:	0020      	movs	r0, r4
 8001c74:	f7ff fdae 	bl	80017d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001c78:	f7ff ff84 	bl	8001b84 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001c7c:	2800      	cmp	r0, #0
 8001c7e:	d1ee      	bne.n	8001c5e <vTaskDelay+0xa>
 8001c80:	e7eb      	b.n	8001c5a <vTaskDelay+0x6>
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	20000ce0 	.word	0x20000ce0

08001c88 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <vTaskSwitchContext+0x58>)
{
 8001c8a:	b530      	push	{r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <vTaskSwitchContext+0x5c>)
 8001c90:	2a00      	cmp	r2, #0
 8001c92:	d002      	beq.n	8001c9a <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
}
 8001c98:	bd30      	pop	{r4, r5, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c9a:	2514      	movs	r5, #20
 8001c9c:	4812      	ldr	r0, [pc, #72]	; (8001ce8 <vTaskSwitchContext+0x60>)
		xYieldPending = pdFALSE;
 8001c9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ca0:	6802      	ldr	r2, [r0, #0]
 8001ca2:	4912      	ldr	r1, [pc, #72]	; (8001cec <vTaskSwitchContext+0x64>)
 8001ca4:	002b      	movs	r3, r5
 8001ca6:	4353      	muls	r3, r2
 8001ca8:	585c      	ldr	r4, [r3, r1]
 8001caa:	2c00      	cmp	r4, #0
 8001cac:	d012      	beq.n	8001cd4 <vTaskSwitchContext+0x4c>
 8001cae:	18cc      	adds	r4, r1, r3
 8001cb0:	6865      	ldr	r5, [r4, #4]
 8001cb2:	3308      	adds	r3, #8
 8001cb4:	686d      	ldr	r5, [r5, #4]
 8001cb6:	18cb      	adds	r3, r1, r3
 8001cb8:	6065      	str	r5, [r4, #4]
 8001cba:	429d      	cmp	r5, r3
 8001cbc:	d101      	bne.n	8001cc2 <vTaskSwitchContext+0x3a>
 8001cbe:	686b      	ldr	r3, [r5, #4]
 8001cc0:	6063      	str	r3, [r4, #4]
 8001cc2:	2314      	movs	r3, #20
 8001cc4:	4353      	muls	r3, r2
 8001cc6:	18c9      	adds	r1, r1, r3
 8001cc8:	684b      	ldr	r3, [r1, #4]
 8001cca:	68d9      	ldr	r1, [r3, #12]
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <vTaskSwitchContext+0x68>)
 8001cce:	6019      	str	r1, [r3, #0]
 8001cd0:	6002      	str	r2, [r0, #0]
}
 8001cd2:	e7e1      	b.n	8001c98 <vTaskSwitchContext+0x10>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	d101      	bne.n	8001cdc <vTaskSwitchContext+0x54>
 8001cd8:	b672      	cpsid	i
 8001cda:	e7fe      	b.n	8001cda <vTaskSwitchContext+0x52>
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	e7e1      	b.n	8001ca4 <vTaskSwitchContext+0x1c>
 8001ce0:	20000ce0 	.word	0x20000ce0
 8001ce4:	20000d64 	.word	0x20000d64
 8001ce8:	20000ce8 	.word	0x20000ce8
 8001cec:	20000c48 	.word	0x20000c48
 8001cf0:	20000c3c 	.word	0x20000c3c

08001cf4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <xTaskGetSchedulerState+0x18>)
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001cf6:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <xTaskGetSchedulerState+0x1c>)
 8001d00:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8001d02:	4243      	negs	r3, r0
 8001d04:	4158      	adcs	r0, r3
 8001d06:	0040      	lsls	r0, r0, #1
	}
 8001d08:	4770      	bx	lr
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	20000d34 	.word	0x20000d34
 8001d10:	20000ce0 	.word	0x20000ce0

08001d14 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d14:	b510      	push	{r4, lr}

  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff fb4f 	bl	80013ba <osDelay>
 8001d1c:	e7fb      	b.n	8001d16 <StartDefaultTask+0x2>
	...

08001d20 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001d20:	b530      	push	{r4, r5, lr}
 8001d22:	b087      	sub	sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d24:	a801      	add	r0, sp, #4
 8001d26:	0002      	movs	r2, r0
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <MX_FREERTOS_Init+0x20>)
 8001d2a:	cb32      	ldmia	r3!, {r1, r4, r5}
 8001d2c:	c232      	stmia	r2!, {r1, r4, r5}
 8001d2e:	cb12      	ldmia	r3!, {r1, r4}
 8001d30:	c212      	stmia	r2!, {r1, r4}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d32:	2100      	movs	r1, #0
 8001d34:	f7ff fb29 	bl	800138a <osThreadCreate>
 8001d38:	4b02      	ldr	r3, [pc, #8]	; (8001d44 <MX_FREERTOS_Init+0x24>)
 8001d3a:	6018      	str	r0, [r3, #0]
}
 8001d3c:	b007      	add	sp, #28
 8001d3e:	bd30      	pop	{r4, r5, pc}
 8001d40:	080020e8 	.word	0x080020e8
 8001d44:	20000d6c 	.word	0x20000d6c

08001d48 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	2214      	movs	r2, #20
 8001d4e:	2100      	movs	r1, #0
 8001d50:	a803      	add	r0, sp, #12
 8001d52:	f000 f9b5 	bl	80020c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2004      	movs	r0, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	2601      	movs	r6, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d5a:	27c0      	movs	r7, #192	; 0xc0
 8001d5c:	25a0      	movs	r5, #160	; 0xa0

  /*Configure GPIO pins : PA1 PA4 PA13 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d5e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d60:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <MX_GPIO_Init+0x68>)
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d62:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d66:	00ff      	lsls	r7, r7, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d68:	4301      	orrs	r1, r0
 8001d6a:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d6e:	0039      	movs	r1, r7
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d70:	4002      	ands	r2, r0
 8001d72:	9201      	str	r2, [sp, #4]
 8001d74:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d78:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7a:	4332      	orrs	r2, r6
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d80:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	4033      	ands	r3, r6
 8001d84:	9302      	str	r3, [sp, #8]
 8001d86:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d88:	f7fe fc90 	bl	80006ac <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <MX_GPIO_Init+0x6c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	a903      	add	r1, sp, #12
 8001d90:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14;
 8001d92:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d94:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f7fe fbda 	bl	8000550 <HAL_GPIO_Init>
  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	a903      	add	r1, sp, #12
 8001d9e:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001da0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f7fe fbd2 	bl	8000550 <HAL_GPIO_Init>

}
 8001dac:	b009      	add	sp, #36	; 0x24
 8001dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	00006012 	.word	0x00006012

08001db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001db8:	b570      	push	{r4, r5, r6, lr}
 8001dba:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dbc:	2234      	movs	r2, #52	; 0x34
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	a80b      	add	r0, sp, #44	; 0x2c
 8001dc2:	f000 f97d 	bl	80020c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc6:	2214      	movs	r2, #20
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4668      	mov	r0, sp
 8001dcc:	f000 f978 	bl	80020c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd0:	2218      	movs	r2, #24
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	a805      	add	r0, sp, #20
 8001dd6:	f000 f973 	bl	80020c0 <memset>

  /**Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dda:	4917      	ldr	r1, [pc, #92]	; (8001e38 <SystemClock_Config+0x80>)
 8001ddc:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <SystemClock_Config+0x84>)
 8001dde:	680b      	ldr	r3, [r1, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de0:	2601      	movs	r6, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de2:	401a      	ands	r2, r3
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001dec:	23a0      	movs	r3, #160	; 0xa0
 8001dee:	02db      	lsls	r3, r3, #11
 8001df0:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	025b      	lsls	r3, r3, #9
 8001df6:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 8001df8:	23c0      	movs	r3, #192	; 0xc0
 8001dfa:	031b      	lsls	r3, r3, #12
 8001dfc:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001dfe:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001e02:	03db      	lsls	r3, r3, #15
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e04:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8001e06:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e08:	960b      	str	r6, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0a:	9514      	str	r5, [sp, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0c:	f7fe fc90 	bl	8000730 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e10:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e12:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e14:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e16:	0031      	movs	r1, r6
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e18:	3b0c      	subs	r3, #12
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e1a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e1c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e1e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e20:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e22:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e24:	f7fe fed6 	bl	8000bd4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e28:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e2a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e2c:	9407      	str	r4, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e2e:	f7fe ffa9 	bl	8000d84 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001e32:	b018      	add	sp, #96	; 0x60
 8001e34:	bd70      	pop	{r4, r5, r6, pc}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	40007000 	.word	0x40007000
 8001e3c:	ffffe7ff 	.word	0xffffe7ff

08001e40 <main>:
{
 8001e40:	b510      	push	{r4, lr}
  HAL_Init();
 8001e42:	f7fe fb19 	bl	8000478 <HAL_Init>
  SystemClock_Config();
 8001e46:	f7ff ffb7 	bl	8001db8 <SystemClock_Config>
  MX_GPIO_Init();
 8001e4a:	f7ff ff7d 	bl	8001d48 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001e4e:	f000 f809 	bl	8001e64 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e52:	f000 f89d 	bl	8001f90 <MX_USART2_UART_Init>
  MX_FREERTOS_Init();
 8001e56:	f7ff ff63 	bl	8001d20 <MX_FREERTOS_Init>
  osKernelStart();
 8001e5a:	f7ff fa91 	bl	8001380 <osKernelStart>
 8001e5e:	e7fe      	b.n	8001e5e <main+0x1e>

08001e60 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e60:	4770      	bx	lr
	...

08001e64 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001e64:	480d      	ldr	r0, [pc, #52]	; (8001e9c <MX_SPI1_Init+0x38>)
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <MX_SPI1_Init+0x3c>)
{
 8001e68:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8001e6a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e6c:	2382      	movs	r3, #130	; 0x82
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e72:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e74:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e76:	0092      	lsls	r2, r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e78:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e7a:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e7c:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e7e:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e80:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e82:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e84:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e86:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e88:	3307      	adds	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e8a:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8001e8c:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e8e:	f7ff f833 	bl	8000ef8 <HAL_SPI_Init>
 8001e92:	2800      	cmp	r0, #0
 8001e94:	d001      	beq.n	8001e9a <MX_SPI1_Init+0x36>
  {
    Error_Handler();
 8001e96:	f7ff ffe3 	bl	8001e60 <Error_Handler>
  }

}
 8001e9a:	bd10      	pop	{r4, pc}
 8001e9c:	20000d70 	.word	0x20000d70
 8001ea0:	40013000 	.word	0x40013000

08001ea4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ea4:	b510      	push	{r4, lr}
 8001ea6:	0004      	movs	r4, r0
 8001ea8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	2214      	movs	r2, #20
 8001eac:	2100      	movs	r1, #0
 8001eae:	a801      	add	r0, sp, #4
 8001eb0:	f000 f906 	bl	80020c0 <memset>
  if(spiHandle->Instance==SPI1)
 8001eb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_SPI_MspInit+0x50>)
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d118      	bne.n	8001eee <HAL_SPI_MspInit+0x4a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_SPI_MspInit+0x54>)
 8001ec0:	0152      	lsls	r2, r2, #5
 8001ec2:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ec6:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec8:	2101      	movs	r1, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	400b      	ands	r3, r1
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001edc:	23e0      	movs	r3, #224	; 0xe0
 8001ede:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	3bde      	subs	r3, #222	; 0xde
 8001ee2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee4:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eea:	f7fe fb31 	bl	8000550 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001eee:	b006      	add	sp, #24
 8001ef0:	bd10      	pop	{r4, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	40013000 	.word	0x40013000
 8001ef8:	40021000 	.word	0x40021000

08001efc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efc:	2201      	movs	r2, #1
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_MspInit+0x24>)
{
 8001f00:	b510      	push	{r4, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001f04:	2002      	movs	r0, #2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	430a      	orrs	r2, r1
 8001f08:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0a:	2280      	movs	r2, #128	; 0x80
 8001f0c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001f0e:	0552      	lsls	r2, r2, #21
 8001f10:	430a      	orrs	r2, r1
 8001f12:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001f14:	2103      	movs	r1, #3
 8001f16:	2200      	movs	r2, #0
 8001f18:	4240      	negs	r0, r0
 8001f1a:	f7fe facf 	bl	80004bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f1e:	bd10      	pop	{r4, pc}
 8001f20:	40021000 	.word	0x40021000

08001f24 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f24:	4770      	bx	lr

08001f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f26:	e7fe      	b.n	8001f26 <HardFault_Handler>

08001f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2a:	f7fe fab9 	bl	80004a0 <HAL_IncTick>
  osSystickHandler();
 8001f2e:	f7ff fa4c 	bl	80013ca <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bd10      	pop	{r4, pc}

08001f34 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <SystemInit+0x44>)
 8001f38:	0052      	lsls	r2, r2, #1
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	490e      	ldr	r1, [pc, #56]	; (8001f7c <SystemInit+0x48>)
 8001f44:	400a      	ands	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	490d      	ldr	r1, [pc, #52]	; (8001f80 <SystemInit+0x4c>)
 8001f4c:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f4e:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8001f50:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	438a      	bics	r2, r1
 8001f56:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	490a      	ldr	r1, [pc, #40]	; (8001f84 <SystemInit+0x50>)
 8001f5c:	400a      	ands	r2, r1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8001f60:	68da      	ldr	r2, [r3, #12]
 8001f62:	4909      	ldr	r1, [pc, #36]	; (8001f88 <SystemInit+0x54>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f6c:	2280      	movs	r2, #128	; 0x80
 8001f6e:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <SystemInit+0x58>)
 8001f70:	0512      	lsls	r2, r2, #20
 8001f72:	609a      	str	r2, [r3, #8]
#endif
}
 8001f74:	4770      	bx	lr
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	88ff400c 	.word	0x88ff400c
 8001f80:	fef6fff6 	.word	0xfef6fff6
 8001f84:	fffbffff 	.word	0xfffbffff
 8001f88:	ff02ffff 	.word	0xff02ffff
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <MX_USART2_UART_Init+0x30>)
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <MX_USART2_UART_Init+0x34>)
{
 8001f94:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001f96:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001f98:	23e1      	movs	r3, #225	; 0xe1
 8001f9a:	025b      	lsls	r3, r3, #9
 8001f9c:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f9e:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa0:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fa2:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fa8:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fac:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fae:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fb0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fb2:	f7ff f9b3 	bl	800131c <HAL_UART_Init>
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART2_UART_Init+0x2e>
  {
    Error_Handler();
 8001fba:	f7ff ff51 	bl	8001e60 <Error_Handler>
  }

}
 8001fbe:	bd10      	pop	{r4, pc}
 8001fc0:	20000dc8 	.word	0x20000dc8
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	0004      	movs	r4, r0
 8001fcc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fce:	2214      	movs	r2, #20
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	a801      	add	r0, sp, #4
 8001fd4:	f000 f874 	bl	80020c0 <memset>
  if(uartHandle->Instance==USART2)
 8001fd8:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_UART_MspInit+0x54>)
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d11a      	bne.n	8002016 <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe0:	2280      	movs	r2, #128	; 0x80
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <HAL_UART_MspInit+0x58>)
 8001fe4:	0292      	lsls	r2, r2, #10
 8001fe6:	6b99      	ldr	r1, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fea:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fec:	2101      	movs	r1, #1
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	400b      	ands	r3, r1
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002000:	230c      	movs	r3, #12
 8002002:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002004:	3b0a      	subs	r3, #10
 8002006:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002008:	185b      	adds	r3, r3, r1
 800200a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800200c:	185b      	adds	r3, r3, r1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8002010:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f7fe fa9d 	bl	8000550 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002016:	b006      	add	sp, #24
 8002018:	bd10      	pop	{r4, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	40004400 	.word	0x40004400
 8002020:	40021000 	.word	0x40021000

08002024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002026:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002028:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800202a:	e003      	b.n	8002034 <LoopCopyDataInit>

0800202c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 800202e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002030:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002032:	3104      	adds	r1, #4

08002034 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002034:	480b      	ldr	r0, [pc, #44]	; (8002064 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002036:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002038:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800203a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800203c:	d3f6      	bcc.n	800202c <CopyDataInit>
  ldr  r2, =_sbss
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <LoopForever+0x12>)
  b  LoopFillZerobss
 8002040:	e002      	b.n	8002048 <LoopFillZerobss>

08002042 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002042:	2300      	movs	r3, #0
  str  r3, [r2]
 8002044:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002046:	3204      	adds	r2, #4

08002048 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002048:	4b09      	ldr	r3, [pc, #36]	; (8002070 <LoopForever+0x16>)
  cmp  r2, r3
 800204a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800204c:	d3f9      	bcc.n	8002042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800204e:	f7ff ff71 	bl	8001f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002052:	f000 f811 	bl	8002078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002056:	f7ff fef3 	bl	8001e40 <main>

0800205a <LoopForever>:

LoopForever:
    b LoopForever
 800205a:	e7fe      	b.n	800205a <LoopForever>
   ldr   r0, =_estack
 800205c:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002060:	0800214c 	.word	0x0800214c
  ldr  r0, =_sdata
 8002064:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002068:	20000008 	.word	0x20000008
  ldr  r2, =_sbss
 800206c:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8002070:	20000e48 	.word	0x20000e48

08002074 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002074:	e7fe      	b.n	8002074 <ADC1_COMP_IRQHandler>
	...

08002078 <__libc_init_array>:
 8002078:	b570      	push	{r4, r5, r6, lr}
 800207a:	2600      	movs	r6, #0
 800207c:	4d0c      	ldr	r5, [pc, #48]	; (80020b0 <__libc_init_array+0x38>)
 800207e:	4c0d      	ldr	r4, [pc, #52]	; (80020b4 <__libc_init_array+0x3c>)
 8002080:	1b64      	subs	r4, r4, r5
 8002082:	10a4      	asrs	r4, r4, #2
 8002084:	42a6      	cmp	r6, r4
 8002086:	d109      	bne.n	800209c <__libc_init_array+0x24>
 8002088:	2600      	movs	r6, #0
 800208a:	f000 f821 	bl	80020d0 <_init>
 800208e:	4d0a      	ldr	r5, [pc, #40]	; (80020b8 <__libc_init_array+0x40>)
 8002090:	4c0a      	ldr	r4, [pc, #40]	; (80020bc <__libc_init_array+0x44>)
 8002092:	1b64      	subs	r4, r4, r5
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	42a6      	cmp	r6, r4
 8002098:	d105      	bne.n	80020a6 <__libc_init_array+0x2e>
 800209a:	bd70      	pop	{r4, r5, r6, pc}
 800209c:	00b3      	lsls	r3, r6, #2
 800209e:	58eb      	ldr	r3, [r5, r3]
 80020a0:	4798      	blx	r3
 80020a2:	3601      	adds	r6, #1
 80020a4:	e7ee      	b.n	8002084 <__libc_init_array+0xc>
 80020a6:	00b3      	lsls	r3, r6, #2
 80020a8:	58eb      	ldr	r3, [r5, r3]
 80020aa:	4798      	blx	r3
 80020ac:	3601      	adds	r6, #1
 80020ae:	e7f2      	b.n	8002096 <__libc_init_array+0x1e>
 80020b0:	08002144 	.word	0x08002144
 80020b4:	08002144 	.word	0x08002144
 80020b8:	08002144 	.word	0x08002144
 80020bc:	08002148 	.word	0x08002148

080020c0 <memset>:
 80020c0:	0003      	movs	r3, r0
 80020c2:	1882      	adds	r2, r0, r2
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d100      	bne.n	80020ca <memset+0xa>
 80020c8:	4770      	bx	lr
 80020ca:	7019      	strb	r1, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	e7f9      	b.n	80020c4 <memset+0x4>

080020d0 <_init>:
 80020d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020d6:	bc08      	pop	{r3}
 80020d8:	469e      	mov	lr, r3
 80020da:	4770      	bx	lr

080020dc <_fini>:
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e2:	bc08      	pop	{r3}
 80020e4:	469e      	mov	lr, r3
 80020e6:	4770      	bx	lr
